!function t(n,e,r){function o(u,s){if(!e[u]){if(!n[u]){var a="function"==typeof require&&require;if(!s&&a)return a(u,!0);if(i)return i(u,!0);var c=new Error("Cannot find module '"+u+"'");throw c.code="MODULE_NOT_FOUND",c}var f=e[u]={exports:{}};n[u][0].call(f.exports,function(t){var e=n[u][1][t];return o(e?e:t)},f,f.exports,t,n,e,r)}return e[u].exports}for(var i="function"==typeof require&&require,u=0;u<r.length;u++)o(r[u]);return o}({1:[function(t,n,e){(function(){"use strict";this.lava=t("./lava.js"),this.addEventListener("resize",this.lava.redrawCharts),this.lava.run()}).apply(window)},{"./lava.js":2}],2:[function(t,n,e){"use strict";const r=t("events"),o=t("util");var i=function(){r.call(this),this._charts=[],this._dashboards=[],this._readyCallback=null,this.dataVer="0.6",this.errors=t("./lava/Errors.js")};o.inherits(i,r),n.exports=new i,i.prototype.Chart=t("./lava/Chart.js"),i.prototype.Dashboard=t("./lava/Dashboard.js"),i.prototype.DataTable=function(t){return new window.google.visualization.DataTable(t)},i.prototype.ready=function(t){if("function"!=typeof t)throw this.errors.INVALID_CALLBACK(t);this._readyCallback=t,this.on("ready",this._readyCallback)},i.prototype.event=function(t,n,e){return e(t,n)},i.prototype.loadData=function(t,n,e){this.getChart(t,function(t){"undefined"!=typeof n.data?t.setData(n.data):t.setData(n),"undefined"!=typeof n.formats&&t.applyFormats(n.formats),t.redraw(),"function"==typeof e&&e(t)})},i.prototype.storeChart=function(t){this._charts.push(t)},i.prototype.storeDashboard=function(t){this._dashboards.push(t)},i.prototype.getChart=function(n,e){var r=t("underscore");if("string"!=typeof n)throw this.errors.INVALID_LABEL(n);if("function"!=typeof e)throw this.errors.INVALID_CALLBACK(e);var o=r.find(this._charts,r.matches({label:n}),this);if(!o)throw this.errors.CHART_NOT_FOUND(n);e(o)},i.prototype.getCharts=function(t){if("function"!=typeof t)throw this.errors.INVALID_CALLBACK(t);t(this._charts)},i.prototype.redrawCharts=function(){var n=t("underscore");n.debounce(function(){n.each(this._charts,function(t){t.redraw()})}.bind(this),300)},i.prototype.getDashboard=function(n,e){var r=t("underscore");if("function"!=typeof e)throw this.errors.INVALID_CALLBACK(e);var o=r.find(this._dashboards,r.matches({label:n}),this);if(!o)throw this.errors.DASHBOARD_NOT_FOUND(n);e(o)},i.prototype.loadJsapi=function(){var n=(t("q"),document.createElement("script"));n.type="text/javascript",n.async=!0,n.src="//www.google.com/jsapi",n.onload=n.onreadystatechange=function(t){t=t||window.event,("load"===t.type||/loaded|complete/.test(this.readyState))&&(this.onload=this.onreadystatechange=null,this.emit("jsapi:ready",window.google))}.bind(this),document.head.appendChild(n)},i.prototype.run=function(){this.loadJsapi();var t=0;this.on("rendered",function(){t++,t==this._charts.length&&this._readyCallback()})}},{"./lava/Chart.js":3,"./lava/Dashboard.js":4,"./lava/Errors.js":5,events:7,q:12,underscore:13,util:11}],3:[function(t,n,e){"use strict";var r=function(n,e){this.type=n,this.label=e,this.element=null,this.data=null,this.chart=null,this.options=null,this.formats=[],this.render=null,this._errors=t("./errors.js"),this.deferred=t("q").defer()};r.prototype.setData=function(t){this.data=new window.google.visualization.DataTable(t,lava.dataVer)},r.prototype.setElement=function(t){if(this.element=document.getElementById(t),!this.element)throw this._errors.ELEMENT_ID_NOT_FOUND(t)},r.prototype.redraw=function(){this.chart.draw(this.data,this.options)},r.prototype.applyFormats=function(t){for(var n=0;n<t.length;n++){var e=t[n],r=new google.visualization[e.type](e.config);r.format(this.data,e.index)}},n.exports=r},{"./errors.js":6,q:12}],4:[function(t,n,e){"use strict";var r=function(n){this.label=n,this.element=null,this.render=null,this.bindings=[],this.dashboard=null,this._data=null,this._errors=t("./errors.js")};r.prototype.setData=function(t){this._data=new window.google.visualization.DataTable(t,lava.dataVer)},r.prototype.setElement=function(t){if(this.element=document.getElementById(t),!this.element)throw this._errors.ELEMENT_ID_NOT_FOUND(t)},n.exports=r},{"./errors.js":6}],5:[function(t,n,e){"use strict";n.exports={INVALID_CALLBACK:function(t){return new Error("[Lavacharts] "+typeof t+" is not a valid callback.")},INVALID_LABEL:function(t){return new Error("[Lavacharts] "+typeof t+" is not a valid label.")},ELEMENT_ID_NOT_FOUND:function(t){return new Error("[Lavacharts] DOM node #"+t+" was not found.")},CHART_NOT_FOUND:function(t){return new Error('[Lavacharts] Chart with label "'+t+'" was not found.')},DASHBOARD_NOT_FOUND:function(t){return new Error('[Lavacharts] Dashboard with label "'+t+'" was not found.')}}},{}],6:[function(t,n,e){arguments[4][5][0].apply(e,arguments)},{dup:5}],7:[function(t,n,e){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function o(t){return"function"==typeof t}function i(t){return"number"==typeof t}function u(t){return"object"==typeof t&&null!==t}function s(t){return void 0===t}n.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(t){if(!i(t)||0>t||isNaN(t))throw TypeError("n must be a positive number");return this._maxListeners=t,this},r.prototype.emit=function(t){var n,e,r,i,a,c;if(this._events||(this._events={}),"error"===t&&(!this._events.error||u(this._events.error)&&!this._events.error.length)){if(n=arguments[1],n instanceof Error)throw n;throw TypeError('Uncaught, unspecified "error" event.')}if(e=this._events[t],s(e))return!1;if(o(e))switch(arguments.length){case 1:e.call(this);break;case 2:e.call(this,arguments[1]);break;case 3:e.call(this,arguments[1],arguments[2]);break;default:for(r=arguments.length,i=new Array(r-1),a=1;r>a;a++)i[a-1]=arguments[a];e.apply(this,i)}else if(u(e)){for(r=arguments.length,i=new Array(r-1),a=1;r>a;a++)i[a-1]=arguments[a];for(c=e.slice(),r=c.length,a=0;r>a;a++)c[a].apply(this,i)}return!0},r.prototype.addListener=function(t,n){var e;if(!o(n))throw TypeError("listener must be a function");if(this._events||(this._events={}),this._events.newListener&&this.emit("newListener",t,o(n.listener)?n.listener:n),this._events[t]?u(this._events[t])?this._events[t].push(n):this._events[t]=[this._events[t],n]:this._events[t]=n,u(this._events[t])&&!this._events[t].warned){var e;e=s(this._maxListeners)?r.defaultMaxListeners:this._maxListeners,e&&e>0&&this._events[t].length>e&&(this._events[t].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[t].length),"function"==typeof console.trace&&console.trace())}return this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(t,n){function e(){this.removeListener(t,e),r||(r=!0,n.apply(this,arguments))}if(!o(n))throw TypeError("listener must be a function");var r=!1;return e.listener=n,this.on(t,e),this},r.prototype.removeListener=function(t,n){var e,r,i,s;if(!o(n))throw TypeError("listener must be a function");if(!this._events||!this._events[t])return this;if(e=this._events[t],i=e.length,r=-1,e===n||o(e.listener)&&e.listener===n)delete this._events[t],this._events.removeListener&&this.emit("removeListener",t,n);else if(u(e)){for(s=i;s-- >0;)if(e[s]===n||e[s].listener&&e[s].listener===n){r=s;break}if(0>r)return this;1===e.length?(e.length=0,delete this._events[t]):e.splice(r,1),this._events.removeListener&&this.emit("removeListener",t,n)}return this},r.prototype.removeAllListeners=function(t){var n,e;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[t]&&delete this._events[t],this;if(0===arguments.length){for(n in this._events)"removeListener"!==n&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events={},this}if(e=this._events[t],o(e))this.removeListener(t,e);else for(;e.length;)this.removeListener(t,e[e.length-1]);return delete this._events[t],this},r.prototype.listeners=function(t){var n;return n=this._events&&this._events[t]?o(this._events[t])?[this._events[t]]:this._events[t].slice():[]},r.listenerCount=function(t,n){var e;return e=t._events&&t._events[n]?o(t._events[n])?1:t._events[n].length:0}},{}],8:[function(t,n,e){"function"==typeof Object.create?n.exports=function(t,n){t.super_=n,t.prototype=Object.create(n.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:n.exports=function(t,n){t.super_=n;var e=function(){};e.prototype=n.prototype,t.prototype=new e,t.prototype.constructor=t}},{}],9:[function(t,n,e){function r(){f=!1,s.length?c=s.concat(c):l=-1,c.length&&o()}function o(){if(!f){var t=setTimeout(r);f=!0;for(var n=c.length;n;){for(s=c,c=[];++l<n;)s&&s[l].run();l=-1,n=c.length}s=null,f=!1,clearTimeout(t)}}function i(t,n){this.fun=t,this.array=n}function u(){}var s,a=n.exports={},c=[],f=!1,l=-1;a.nextTick=function(t){var n=new Array(arguments.length-1);if(arguments.length>1)for(var e=1;e<arguments.length;e++)n[e-1]=arguments[e];c.push(new i(t,n)),1!==c.length||f||setTimeout(o,0)},i.prototype.run=function(){this.fun.apply(null,this.array)},a.title="browser",a.browser=!0,a.env={},a.argv=[],a.version="",a.versions={},a.on=u,a.addListener=u,a.once=u,a.off=u,a.removeListener=u,a.removeAllListeners=u,a.emit=u,a.binding=function(t){throw new Error("process.binding is not supported")},a.cwd=function(){return"/"},a.chdir=function(t){throw new Error("process.chdir is not supported")},a.umask=function(){return 0}},{}],10:[function(t,n,e){n.exports=function(t){return t&&"object"==typeof t&&"function"==typeof t.copy&&"function"==typeof t.fill&&"function"==typeof t.readUInt8}},{}],11:[function(t,n,e){(function(n,r){function o(t,n){var r={seen:[],stylize:u};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),v(n)?r.showHidden=n:n&&e._extend(r,n),_(r.showHidden)&&(r.showHidden=!1),_(r.depth)&&(r.depth=2),_(r.colors)&&(r.colors=!1),_(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=i),a(r,t,r.depth)}function i(t,n){var e=o.styles[n];return e?"["+o.colors[e][0]+"m"+t+"["+o.colors[e][1]+"m":t}function u(t,n){return t}function s(t){var n={};return t.forEach(function(t,e){n[t]=!0}),n}function a(t,n,r){if(t.customInspect&&n&&E(n.inspect)&&n.inspect!==e.inspect&&(!n.constructor||n.constructor.prototype!==n)){var o=n.inspect(r,t);return w(o)||(o=a(t,o,r)),o}var i=c(t,n);if(i)return i;var u=Object.keys(n),v=s(u);if(t.showHidden&&(u=Object.getOwnPropertyNames(n)),O(n)&&(u.indexOf("message")>=0||u.indexOf("description")>=0))return f(n);if(0===u.length){if(E(n)){var y=n.name?": "+n.name:"";return t.stylize("[Function"+y+"]","special")}if(j(n))return t.stylize(RegExp.prototype.toString.call(n),"regexp");if(k(n))return t.stylize(Date.prototype.toString.call(n),"date");if(O(n))return f(n)}var m="",g=!1,b=["{","}"];if(d(n)&&(g=!0,b=["[","]"]),E(n)){var _=n.name?": "+n.name:"";m=" [Function"+_+"]"}if(j(n)&&(m=" "+RegExp.prototype.toString.call(n)),k(n)&&(m=" "+Date.prototype.toUTCString.call(n)),O(n)&&(m=" "+f(n)),0===u.length&&(!g||0==n.length))return b[0]+m+b[1];if(0>r)return j(n)?t.stylize(RegExp.prototype.toString.call(n),"regexp"):t.stylize("[Object]","special");t.seen.push(n);var x;return x=g?l(t,n,r,v,u):u.map(function(e){return p(t,n,r,v,e,g)}),t.seen.pop(),h(x,m,b)}function c(t,n){if(_(n))return t.stylize("undefined","undefined");if(w(n)){var e="'"+JSON.stringify(n).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(e,"string")}return g(n)?t.stylize(""+n,"number"):v(n)?t.stylize(""+n,"boolean"):y(n)?t.stylize("null","null"):void 0}function f(t){return"["+Error.prototype.toString.call(t)+"]"}function l(t,n,e,r,o){for(var i=[],u=0,s=n.length;s>u;++u)N(n,String(u))?i.push(p(t,n,e,r,String(u),!0)):i.push("");return o.forEach(function(o){o.match(/^\d+$/)||i.push(p(t,n,e,r,o,!0))}),i}function p(t,n,e,r,o,i){var u,s,c;if(c=Object.getOwnPropertyDescriptor(n,o)||{value:n[o]},c.get?s=c.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):c.set&&(s=t.stylize("[Setter]","special")),N(r,o)||(u="["+o+"]"),s||(t.seen.indexOf(c.value)<0?(s=y(e)?a(t,c.value,null):a(t,c.value,e-1),s.indexOf("\n")>-1&&(s=i?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n"))):s=t.stylize("[Circular]","special")),_(u)){if(i&&o.match(/^\d+$/))return s;u=JSON.stringify(""+o),u.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(u=u.substr(1,u.length-2),u=t.stylize(u,"name")):(u=u.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),u=t.stylize(u,"string"))}return u+": "+s}function h(t,n,e){var r=0,o=t.reduce(function(t,n){return r++,n.indexOf("\n")>=0&&r++,t+n.replace(/\u001b\[\d\d?m/g,"").length+1},0);return o>60?e[0]+(""===n?"":n+"\n ")+" "+t.join(",\n  ")+" "+e[1]:e[0]+n+" "+t.join(", ")+" "+e[1]}function d(t){return Array.isArray(t)}function v(t){return"boolean"==typeof t}function y(t){return null===t}function m(t){return null==t}function g(t){return"number"==typeof t}function w(t){return"string"==typeof t}function b(t){return"symbol"==typeof t}function _(t){return void 0===t}function j(t){return x(t)&&"[object RegExp]"===D(t)}function x(t){return"object"==typeof t&&null!==t}function k(t){return x(t)&&"[object Date]"===D(t)}function O(t){return x(t)&&("[object Error]"===D(t)||t instanceof Error)}function E(t){return"function"==typeof t}function A(t){return null===t||"boolean"==typeof t||"number"==typeof t||"string"==typeof t||"symbol"==typeof t||"undefined"==typeof t}function D(t){return Object.prototype.toString.call(t)}function L(t){return 10>t?"0"+t.toString(10):t.toString(10)}function T(){var t=new Date,n=[L(t.getHours()),L(t.getMinutes()),L(t.getSeconds())].join(":");return[t.getDate(),I[t.getMonth()],n].join(" ")}function N(t,n){return Object.prototype.hasOwnProperty.call(t,n)}var S=/%[sdj%]/g;e.format=function(t){if(!w(t)){for(var n=[],e=0;e<arguments.length;e++)n.push(o(arguments[e]));return n.join(" ")}for(var e=1,r=arguments,i=r.length,u=String(t).replace(S,function(t){if("%%"===t)return"%";if(e>=i)return t;switch(t){case"%s":return String(r[e++]);case"%d":return Number(r[e++]);case"%j":try{return JSON.stringify(r[e++])}catch(n){return"[Circular]"}default:return t}}),s=r[e];i>e;s=r[++e])u+=y(s)||!x(s)?" "+s:" "+o(s);return u},e.deprecate=function(t,o){function i(){if(!u){if(n.throwDeprecation)throw new Error(o);n.traceDeprecation?console.trace(o):console.error(o),u=!0}return t.apply(this,arguments)}if(_(r.process))return function(){return e.deprecate(t,o).apply(this,arguments)};if(n.noDeprecation===!0)return t;var u=!1;return i};var C,R={};e.debuglog=function(t){if(_(C)&&(C=n.env.NODE_DEBUG||""),t=t.toUpperCase(),!R[t])if(new RegExp("\\b"+t+"\\b","i").test(C)){var r=n.pid;R[t]=function(){var n=e.format.apply(e,arguments);console.error("%s %d: %s",t,r,n)}}else R[t]=function(){};return R[t]},e.inspect=o,o.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},o.styles={special:"cyan",number:"yellow","boolean":"yellow",undefined:"grey","null":"bold",string:"green",date:"magenta",regexp:"red"},e.isArray=d,e.isBoolean=v,e.isNull=y,e.isNullOrUndefined=m,e.isNumber=g,e.isString=w,e.isSymbol=b,e.isUndefined=_,e.isRegExp=j,e.isObject=x,e.isDate=k,e.isError=O,e.isFunction=E,e.isPrimitive=A,e.isBuffer=t("./support/isBuffer");var I=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"];e.log=function(){console.log("%s - %s",T(),e.format.apply(e,arguments))},e.inherits=t("inherits"),e._extend=function(t,n){if(!n||!x(n))return t;for(var e=Object.keys(n),r=e.length;r--;)t[e[r]]=n[e[r]];return t}}).call(this,t("_process"),"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./support/isBuffer":10,_process:9,inherits:8}],12:[function(t,n,e){(function(t){!function(t){"use strict";if("function"==typeof bootstrap)bootstrap("promise",t);else if("object"==typeof e&&"object"==typeof n)n.exports=t();else if("function"==typeof define&&define.amd)define(t);else if("undefined"!=typeof ses){if(!ses.ok())return;ses.makeQ=t}else{if("undefined"==typeof window&&"undefined"==typeof self)throw new Error("This environment was not anticipated by Q. Please file a bug.");var r="undefined"!=typeof window?window:self,o=r.Q;r.Q=t(),r.Q.noConflict=function(){return r.Q=o,this}}}(function(){"use strict";function n(t){return function(){return G.apply(t,arguments)}}function e(t){return t===Object(t)}function r(t){return"[object StopIteration]"===rt(t)||t instanceof H}function o(t,n){if(q&&n.stack&&"object"==typeof t&&null!==t&&t.stack&&-1===t.stack.indexOf(ot)){for(var e=[],r=n;r;r=r.source)r.stack&&e.unshift(r.stack);e.unshift(t.stack);var o=e.join("\n"+ot+"\n");t.stack=i(o)}}function i(t){for(var n=t.split("\n"),e=[],r=0;r<n.length;++r){var o=n[r];a(o)||u(o)||!o||e.push(o)}return e.join("\n")}function u(t){return-1!==t.indexOf("(module.js:")||-1!==t.indexOf("(node.js:")}function s(t){var n=/at .+ \((.+):(\d+):(?:\d+)\)$/.exec(t);if(n)return[n[1],Number(n[2])];var e=/at ([^ ]+):(\d+):(?:\d+)$/.exec(t);if(e)return[e[1],Number(e[2])];var r=/.*@(.+):(\d+)$/.exec(t);return r?[r[1],Number(r[2])]:void 0}function a(t){var n=s(t);if(!n)return!1;var e=n[0],r=n[1];return e===K&&r>=J&&ct>=r}function c(){if(q)try{throw new Error}catch(t){var n=t.stack.split("\n"),e=n[0].indexOf("@")>0?n[1]:n[2],r=s(e);if(!r)return;return K=r[0],r[1]}}function f(t,n,e){return function(){return"undefined"!=typeof console&&"function"==typeof console.warn&&console.warn(n+" is deprecated, use "+e+" instead.",new Error("").stack),t.apply(t,arguments)}}function l(t){return t instanceof v?t:w(t)?D(t):A(t)}function p(){function t(t){n=t,i.source=t,W(e,function(n,e){l.nextTick(function(){t.promiseDispatch.apply(t,e)})},void 0),e=void 0,r=void 0}var n,e=[],r=[],o=tt(p.prototype),i=tt(v.prototype);if(i.promiseDispatch=function(t,o,i){var u=Z(arguments);e?(e.push(u),"when"===o&&i[1]&&r.push(i[1])):l.nextTick(function(){n.promiseDispatch.apply(n,u)})},i.valueOf=function(){if(e)return i;var t=m(n);return g(t)&&(n=t),t},i.inspect=function(){return n?n.inspect():{state:"pending"}},l.longStackSupport&&q)try{throw new Error}catch(u){i.stack=u.stack.substring(u.stack.indexOf("\n")+1)}return o.promise=i,o.resolve=function(e){n||t(l(e))},o.fulfill=function(e){n||t(A(e))},o.reject=function(e){n||t(E(e))},o.notify=function(t){n||W(r,function(n,e){l.nextTick(function(){e(t)})},void 0)},o}function h(t){if("function"!=typeof t)throw new TypeError("resolver must be a function.");var n=p();try{t(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}return n.promise}function d(t){return h(function(n,e){for(var r=0,o=t.length;o>r;r++)l(t[r]).then(n,e)})}function v(t,n,e){void 0===n&&(n=function(t){return E(new Error("Promise does not support operation: "+t))}),void 0===e&&(e=function(){return{state:"unknown"}});var r=tt(v.prototype);if(r.promiseDispatch=function(e,o,i){var u;try{u=t[o]?t[o].apply(r,i):n.call(r,o,i)}catch(s){u=E(s)}e&&e(u)},r.inspect=e,e){var o=e();"rejected"===o.state&&(r.exception=o.reason),r.valueOf=function(){var t=e();return"pending"===t.state||"rejected"===t.state?r:t.value}}return r}function y(t,n,e,r){return l(t).then(n,e,r)}function m(t){if(g(t)){var n=t.inspect();if("fulfilled"===n.state)return n.value}return t}function g(t){return t instanceof v}function w(t){return e(t)&&"function"==typeof t.then}function b(t){return g(t)&&"pending"===t.inspect().state}function _(t){return!g(t)||"fulfilled"===t.inspect().state}function j(t){return g(t)&&"rejected"===t.inspect().state}function x(){it.length=0,ut.length=0,at||(at=!0)}function k(n,e){at&&("object"==typeof t&&"function"==typeof t.emit&&l.nextTick.runAfter(function(){-1!==X(ut,n)&&(t.emit("unhandledRejection",e,n),st.push(n))}),ut.push(n),e&&"undefined"!=typeof e.stack?it.push(e.stack):it.push("(no stack) "+e))}function O(n){if(at){var e=X(ut,n);-1!==e&&("object"==typeof t&&"function"==typeof t.emit&&l.nextTick.runAfter(function(){var r=X(st,n);-1!==r&&(t.emit("rejectionHandled",it[e],n),st.splice(r,1))}),ut.splice(e,1),it.splice(e,1))}}function E(t){var n=v({when:function(n){return n&&O(this),n?n(t):this}},function(){return this},function(){return{state:"rejected",reason:t}});return k(n,t),n}function A(t){return v({when:function(){return t},get:function(n){return t[n]},set:function(n,e){t[n]=e},"delete":function(n){delete t[n]},post:function(n,e){return null===n||void 0===n?t.apply(void 0,e):t[n].apply(t,e)},apply:function(n,e){return t.apply(n,e)},keys:function(){return et(t)}},void 0,function(){return{state:"fulfilled",value:t}})}function D(t){var n=p();return l.nextTick(function(){try{t.then(n.resolve,n.reject,n.notify)}catch(e){n.reject(e)}}),n.promise}function L(t){return v({isDef:function(){}},function(n,e){return I(t,n,e)},function(){return l(t).inspect()})}function T(t,n,e){return l(t).spread(n,e)}function N(t){return function(){function n(t,n){var u;if("undefined"==typeof StopIteration){try{u=e[t](n)}catch(s){return E(s)}return u.done?l(u.value):y(u.value,o,i)}try{u=e[t](n)}catch(s){return r(s)?l(s.value):E(s)}return y(u,o,i)}var e=t.apply(this,arguments),o=n.bind(n,"next"),i=n.bind(n,"throw");return o()}}function S(t){l.done(l.async(t)())}function C(t){throw new H(t)}function R(t){return function(){return T([this,F(arguments)],function(n,e){return t.apply(n,e)})}}function I(t,n,e){return l(t).dispatch(n,e)}function F(t){return y(t,function(t){var n=0,e=p();return W(t,function(r,o,i){var u;g(o)&&"fulfilled"===(u=o.inspect()).state?t[i]=u.value:(++n,y(o,function(r){t[i]=r,0===--n&&e.resolve(t)},e.reject,function(t){e.notify({index:i,value:t})}))},void 0),0===n&&e.resolve(t),e.promise})}function M(t){if(0===t.length)return l.resolve();var n=l.defer(),e=0;return W(t,function(r,o,i){function u(t){n.resolve(t)}function s(){e--,0===e&&n.reject(new Error("Can't get fulfillment value from any promise, all promises were rejected."))}function a(t){n.notify({index:i,value:t})}var c=t[i];e++,y(c,u,s,a)},void 0),n.promise}function z(t){return y(t,function(t){return t=Y(t,l),y(F(Y(t,function(t){return y(t,Q,Q)})),function(){return t})})}function B(t){return l(t).allSettled()}function U(t,n){return l(t).then(void 0,void 0,n)}function P(t,n){return l(t).nodeify(n)}var q=!1;try{throw new Error}catch(V){q=!!V.stack}var K,H,J=c(),Q=function(){},$=function(){function n(){for(var t,n;r.next;)r=r.next,t=r.task,r.task=void 0,n=r.domain,n&&(r.domain=void 0,n.enter()),e(t,n);for(;a.length;)t=a.pop(),e(t);i=!1}function e(t,e){try{t()}catch(r){if(s)throw e&&e.exit(),setTimeout(n,0),e&&e.enter(),r;setTimeout(function(){throw r},0)}e&&e.exit()}var r={task:void 0,next:null},o=r,i=!1,u=void 0,s=!1,a=[];if($=function(n){o=o.next={task:n,domain:s&&t.domain,next:null},i||(i=!0,u())},"object"==typeof t&&"[object process]"===t.toString()&&t.nextTick)s=!0,u=function(){t.nextTick(n)};else if("function"==typeof setImmediate)u="undefined"!=typeof window?setImmediate.bind(window,n):function(){setImmediate(n)};else if("undefined"!=typeof MessageChannel){var c=new MessageChannel;c.port1.onmessage=function(){u=f,c.port1.onmessage=n,n()};var f=function(){c.port2.postMessage(0)};u=function(){setTimeout(n,0),f()}}else u=function(){setTimeout(n,0)};return $.runAfter=function(t){a.push(t),i||(i=!0,u())},$}(),G=Function.call,Z=n(Array.prototype.slice),W=n(Array.prototype.reduce||function(t,n){var e=0,r=this.length;if(1===arguments.length)for(;;){if(e in this){n=this[e++];break}if(++e>=r)throw new TypeError}for(;r>e;e++)e in this&&(n=t(n,this[e],e));return n}),X=n(Array.prototype.indexOf||function(t){for(var n=0;n<this.length;n++)if(this[n]===t)return n;return-1}),Y=n(Array.prototype.map||function(t,n){var e=this,r=[];return W(e,function(o,i,u){r.push(t.call(n,i,u,e))},void 0),r}),tt=Object.create||function(t){function n(){}return n.prototype=t,new n},nt=n(Object.prototype.hasOwnProperty),et=Object.keys||function(t){var n=[];for(var e in t)nt(t,e)&&n.push(e);return n},rt=n(Object.prototype.toString);H="undefined"!=typeof ReturnValue?ReturnValue:function(t){this.value=t};var ot="From previous event:";l.resolve=l,l.nextTick=$,l.longStackSupport=!1,"object"==typeof t&&t&&t.env&&t.env.Q_DEBUG&&(l.longStackSupport=!0),l.defer=p,p.prototype.makeNodeResolver=function(){var t=this;return function(n,e){n?t.reject(n):arguments.length>2?t.resolve(Z(arguments,1)):t.resolve(e)}},l.Promise=h,l.promise=h,h.race=d,h.all=F,h.reject=E,h.resolve=l,l.passByCopy=function(t){return t},v.prototype.passByCopy=function(){return this},l.join=function(t,n){return l(t).join(n)},v.prototype.join=function(t){return l([this,t]).spread(function(t,n){if(t===n)return t;throw new Error("Can't join: not the same: "+t+" "+n)})},l.race=d,v.prototype.race=function(){return this.then(l.race)},l.makePromise=v,v.prototype.toString=function(){return"[object Promise]"},v.prototype.then=function(t,n,e){function r(n){try{return"function"==typeof t?t(n):n}catch(e){return E(e)}}function i(t){if("function"==typeof n){o(t,s);try{return n(t)}catch(e){return E(e)}}return E(t)}function u(t){return"function"==typeof e?e(t):t}var s=this,a=p(),c=!1;return l.nextTick(function(){s.promiseDispatch(function(t){c||(c=!0,a.resolve(r(t)))},"when",[function(t){c||(c=!0,a.resolve(i(t)))}])}),s.promiseDispatch(void 0,"when",[void 0,function(t){var n,e=!1;try{n=u(t)}catch(r){if(e=!0,!l.onerror)throw r;l.onerror(r)}e||a.notify(n)}]),a.promise},l.tap=function(t,n){return l(t).tap(n)},v.prototype.tap=function(t){return t=l(t),this.then(function(n){return t.fcall(n).thenResolve(n)})},l.when=y,v.prototype.thenResolve=function(t){return this.then(function(){return t})},l.thenResolve=function(t,n){return l(t).thenResolve(n)},v.prototype.thenReject=function(t){return this.then(function(){throw t})},l.thenReject=function(t,n){return l(t).thenReject(n)},l.nearer=m,l.isPromise=g,l.isPromiseAlike=w,l.isPending=b,v.prototype.isPending=function(){return"pending"===this.inspect().state},l.isFulfilled=_,v.prototype.isFulfilled=function(){return"fulfilled"===this.inspect().state},l.isRejected=j,v.prototype.isRejected=function(){return"rejected"===this.inspect().state};var it=[],ut=[],st=[],at=!0;l.resetUnhandledRejections=x,l.getUnhandledReasons=function(){return it.slice()},l.stopUnhandledRejectionTracking=function(){x(),at=!1},x(),l.reject=E,l.fulfill=A,l.master=L,l.spread=T,v.prototype.spread=function(t,n){return this.all().then(function(n){return t.apply(void 0,n)},n)},l.async=N,l.spawn=S,l["return"]=C,l.promised=R,l.dispatch=I,v.prototype.dispatch=function(t,n){var e=this,r=p();return l.nextTick(function(){e.promiseDispatch(r.resolve,t,n)}),r.promise},l.get=function(t,n){return l(t).dispatch("get",[n])},v.prototype.get=function(t){return this.dispatch("get",[t])},l.set=function(t,n,e){return l(t).dispatch("set",[n,e])},v.prototype.set=function(t,n){return this.dispatch("set",[t,n])},l.del=l["delete"]=function(t,n){return l(t).dispatch("delete",[n])},v.prototype.del=v.prototype["delete"]=function(t){return this.dispatch("delete",[t])},l.mapply=l.post=function(t,n,e){return l(t).dispatch("post",[n,e])},v.prototype.mapply=v.prototype.post=function(t,n){return this.dispatch("post",[t,n])},l.send=l.mcall=l.invoke=function(t,n){return l(t).dispatch("post",[n,Z(arguments,2)])},v.prototype.send=v.prototype.mcall=v.prototype.invoke=function(t){return this.dispatch("post",[t,Z(arguments,1)])},l.fapply=function(t,n){return l(t).dispatch("apply",[void 0,n])},v.prototype.fapply=function(t){return this.dispatch("apply",[void 0,t])},l["try"]=l.fcall=function(t){return l(t).dispatch("apply",[void 0,Z(arguments,1)])},v.prototype.fcall=function(){return this.dispatch("apply",[void 0,Z(arguments)])},l.fbind=function(t){var n=l(t),e=Z(arguments,1);return function(){return n.dispatch("apply",[this,e.concat(Z(arguments))])}},v.prototype.fbind=function(){var t=this,n=Z(arguments);return function(){return t.dispatch("apply",[this,n.concat(Z(arguments))])}},l.keys=function(t){return l(t).dispatch("keys",[])},v.prototype.keys=function(){return this.dispatch("keys",[])},l.all=F,v.prototype.all=function(){return F(this)},l.any=M,v.prototype.any=function(){return M(this)},l.allResolved=f(z,"allResolved","allSettled"),v.prototype.allResolved=function(){return z(this)},l.allSettled=B,v.prototype.allSettled=function(){return this.then(function(t){return F(Y(t,function(t){function n(){return t.inspect()}return t=l(t),t.then(n,n)}))})},l.fail=l["catch"]=function(t,n){return l(t).then(void 0,n)},v.prototype.fail=v.prototype["catch"]=function(t){return this.then(void 0,t)},l.progress=U,v.prototype.progress=function(t){return this.then(void 0,void 0,t)},l.fin=l["finally"]=function(t,n){return l(t)["finally"](n)},v.prototype.fin=v.prototype["finally"]=function(t){return t=l(t),this.then(function(n){return t.fcall().then(function(){return n})},function(n){return t.fcall().then(function(){throw n})})},l.done=function(t,n,e,r){return l(t).done(n,e,r)},v.prototype.done=function(n,e,r){var i=function(t){l.nextTick(function(){if(o(t,u),!l.onerror)throw t;l.onerror(t)})},u=n||e||r?this.then(n,e,r):this;"object"==typeof t&&t&&t.domain&&(i=t.domain.bind(i)),u.then(void 0,i)},l.timeout=function(t,n,e){return l(t).timeout(n,e)},v.prototype.timeout=function(t,n){var e=p(),r=setTimeout(function(){n&&"string"!=typeof n||(n=new Error(n||"Timed out after "+t+" ms"),n.code="ETIMEDOUT"),e.reject(n)},t);return this.then(function(t){clearTimeout(r),e.resolve(t)},function(t){clearTimeout(r),e.reject(t)},e.notify),e.promise},l.delay=function(t,n){return void 0===n&&(n=t,t=void 0),l(t).delay(n)},v.prototype.delay=function(t){return this.then(function(n){var e=p();return setTimeout(function(){e.resolve(n)},t),e.promise})},l.nfapply=function(t,n){return l(t).nfapply(n)},v.prototype.nfapply=function(t){var n=p(),e=Z(t);return e.push(n.makeNodeResolver()),this.fapply(e).fail(n.reject),n.promise},l.nfcall=function(t){var n=Z(arguments,1);return l(t).nfapply(n)},v.prototype.nfcall=function(){var t=Z(arguments),n=p();return t.push(n.makeNodeResolver()),this.fapply(t).fail(n.reject),n.promise},l.nfbind=l.denodeify=function(t){var n=Z(arguments,1);return function(){var e=n.concat(Z(arguments)),r=p();return e.push(r.makeNodeResolver()),l(t).fapply(e).fail(r.reject),r.promise}},v.prototype.nfbind=v.prototype.denodeify=function(){var t=Z(arguments);return t.unshift(this),l.denodeify.apply(void 0,t)},l.nbind=function(t,n){var e=Z(arguments,2);return function(){function r(){return t.apply(n,arguments)}var o=e.concat(Z(arguments)),i=p();return o.push(i.makeNodeResolver()),l(r).fapply(o).fail(i.reject),i.promise}},v.prototype.nbind=function(){var t=Z(arguments,0);return t.unshift(this),l.nbind.apply(void 0,t)},l.nmapply=l.npost=function(t,n,e){return l(t).npost(n,e)},v.prototype.nmapply=v.prototype.npost=function(t,n){var e=Z(n||[]),r=p();return e.push(r.makeNodeResolver()),this.dispatch("post",[t,e]).fail(r.reject),r.promise},l.nsend=l.nmcall=l.ninvoke=function(t,n){var e=Z(arguments,2),r=p();return e.push(r.makeNodeResolver()),l(t).dispatch("post",[n,e]).fail(r.reject),r.promise},v.prototype.nsend=v.prototype.nmcall=v.prototype.ninvoke=function(t){var n=Z(arguments,1),e=p();return n.push(e.makeNodeResolver()),this.dispatch("post",[t,n]).fail(e.reject),e.promise},l.nodeify=P,v.prototype.nodeify=function(t){return t?void this.then(function(n){l.nextTick(function(){t(null,n)})},function(n){l.nextTick(function(){t(n)})}):this},l.noConflict=function(){throw new Error("Q.noConflict only works when Q is used as a global")};var ct=c();return l})}).call(this,t("_process"))},{_process:9}],13:[function(t,n,e){(function(){function t(t){function n(n,e,r,o,i,u){for(;i>=0&&u>i;i+=t){var s=o?o[i]:i;r=e(r,n[s],s,n)}return r}return function(e,r,o,i){r=_(r,i,4);var u=!D(e)&&b.keys(e),s=(u||e).length,a=t>0?0:s-1;
return arguments.length<3&&(o=e[u?u[a]:a],a+=t),n(e,r,o,u,a,s)}}function r(t){return function(n,e,r){e=j(e,r);for(var o=A(n),i=t>0?0:o-1;i>=0&&o>i;i+=t)if(e(n[i],i,n))return i;return-1}}function o(t,n,e){return function(r,o,i){var u=0,s=A(r);if("number"==typeof i)t>0?u=i>=0?i:Math.max(i+s,u):s=i>=0?Math.min(i+1,s):i+s+1;else if(e&&i&&s)return i=e(r,o),r[i]===o?i:-1;if(o!==o)return i=n(p.call(r,u,s),b.isNaN),i>=0?i+u:-1;for(i=t>0?u:s-1;i>=0&&s>i;i+=t)if(r[i]===o)return i;return-1}}function i(t,n){var e=C.length,r=t.constructor,o=b.isFunction(r)&&r.prototype||c,i="constructor";for(b.has(t,i)&&!b.contains(n,i)&&n.push(i);e--;)i=C[e],i in t&&t[i]!==o[i]&&!b.contains(n,i)&&n.push(i)}var u=this,s=u._,a=Array.prototype,c=Object.prototype,f=Function.prototype,l=a.push,p=a.slice,h=c.toString,d=c.hasOwnProperty,v=Array.isArray,y=Object.keys,m=f.bind,g=Object.create,w=function(){},b=function(t){return t instanceof b?t:this instanceof b?void(this._wrapped=t):new b(t)};"undefined"!=typeof e?("undefined"!=typeof n&&n.exports&&(e=n.exports=b),e._=b):u._=b,b.VERSION="1.8.3";var _=function(t,n,e){if(void 0===n)return t;switch(null==e?3:e){case 1:return function(e){return t.call(n,e)};case 2:return function(e,r){return t.call(n,e,r)};case 3:return function(e,r,o){return t.call(n,e,r,o)};case 4:return function(e,r,o,i){return t.call(n,e,r,o,i)}}return function(){return t.apply(n,arguments)}},j=function(t,n,e){return null==t?b.identity:b.isFunction(t)?_(t,n,e):b.isObject(t)?b.matcher(t):b.property(t)};b.iteratee=function(t,n){return j(t,n,1/0)};var x=function(t,n){return function(e){var r=arguments.length;if(2>r||null==e)return e;for(var o=1;r>o;o++)for(var i=arguments[o],u=t(i),s=u.length,a=0;s>a;a++){var c=u[a];n&&void 0!==e[c]||(e[c]=i[c])}return e}},k=function(t){if(!b.isObject(t))return{};if(g)return g(t);w.prototype=t;var n=new w;return w.prototype=null,n},O=function(t){return function(n){return null==n?void 0:n[t]}},E=Math.pow(2,53)-1,A=O("length"),D=function(t){var n=A(t);return"number"==typeof n&&n>=0&&E>=n};b.each=b.forEach=function(t,n,e){n=_(n,e);var r,o;if(D(t))for(r=0,o=t.length;o>r;r++)n(t[r],r,t);else{var i=b.keys(t);for(r=0,o=i.length;o>r;r++)n(t[i[r]],i[r],t)}return t},b.map=b.collect=function(t,n,e){n=j(n,e);for(var r=!D(t)&&b.keys(t),o=(r||t).length,i=Array(o),u=0;o>u;u++){var s=r?r[u]:u;i[u]=n(t[s],s,t)}return i},b.reduce=b.foldl=b.inject=t(1),b.reduceRight=b.foldr=t(-1),b.find=b.detect=function(t,n,e){var r;return r=D(t)?b.findIndex(t,n,e):b.findKey(t,n,e),void 0!==r&&-1!==r?t[r]:void 0},b.filter=b.select=function(t,n,e){var r=[];return n=j(n,e),b.each(t,function(t,e,o){n(t,e,o)&&r.push(t)}),r},b.reject=function(t,n,e){return b.filter(t,b.negate(j(n)),e)},b.every=b.all=function(t,n,e){n=j(n,e);for(var r=!D(t)&&b.keys(t),o=(r||t).length,i=0;o>i;i++){var u=r?r[i]:i;if(!n(t[u],u,t))return!1}return!0},b.some=b.any=function(t,n,e){n=j(n,e);for(var r=!D(t)&&b.keys(t),o=(r||t).length,i=0;o>i;i++){var u=r?r[i]:i;if(n(t[u],u,t))return!0}return!1},b.contains=b.includes=b.include=function(t,n,e,r){return D(t)||(t=b.values(t)),("number"!=typeof e||r)&&(e=0),b.indexOf(t,n,e)>=0},b.invoke=function(t,n){var e=p.call(arguments,2),r=b.isFunction(n);return b.map(t,function(t){var o=r?n:t[n];return null==o?o:o.apply(t,e)})},b.pluck=function(t,n){return b.map(t,b.property(n))},b.where=function(t,n){return b.filter(t,b.matcher(n))},b.findWhere=function(t,n){return b.find(t,b.matcher(n))},b.max=function(t,n,e){var r,o,i=-(1/0),u=-(1/0);if(null==n&&null!=t){t=D(t)?t:b.values(t);for(var s=0,a=t.length;a>s;s++)r=t[s],r>i&&(i=r)}else n=j(n,e),b.each(t,function(t,e,r){o=n(t,e,r),(o>u||o===-(1/0)&&i===-(1/0))&&(i=t,u=o)});return i},b.min=function(t,n,e){var r,o,i=1/0,u=1/0;if(null==n&&null!=t){t=D(t)?t:b.values(t);for(var s=0,a=t.length;a>s;s++)r=t[s],i>r&&(i=r)}else n=j(n,e),b.each(t,function(t,e,r){o=n(t,e,r),(u>o||o===1/0&&i===1/0)&&(i=t,u=o)});return i},b.shuffle=function(t){for(var n,e=D(t)?t:b.values(t),r=e.length,o=Array(r),i=0;r>i;i++)n=b.random(0,i),n!==i&&(o[i]=o[n]),o[n]=e[i];return o},b.sample=function(t,n,e){return null==n||e?(D(t)||(t=b.values(t)),t[b.random(t.length-1)]):b.shuffle(t).slice(0,Math.max(0,n))},b.sortBy=function(t,n,e){return n=j(n,e),b.pluck(b.map(t,function(t,e,r){return{value:t,index:e,criteria:n(t,e,r)}}).sort(function(t,n){var e=t.criteria,r=n.criteria;if(e!==r){if(e>r||void 0===e)return 1;if(r>e||void 0===r)return-1}return t.index-n.index}),"value")};var L=function(t){return function(n,e,r){var o={};return e=j(e,r),b.each(n,function(r,i){var u=e(r,i,n);t(o,r,u)}),o}};b.groupBy=L(function(t,n,e){b.has(t,e)?t[e].push(n):t[e]=[n]}),b.indexBy=L(function(t,n,e){t[e]=n}),b.countBy=L(function(t,n,e){b.has(t,e)?t[e]++:t[e]=1}),b.toArray=function(t){return t?b.isArray(t)?p.call(t):D(t)?b.map(t,b.identity):b.values(t):[]},b.size=function(t){return null==t?0:D(t)?t.length:b.keys(t).length},b.partition=function(t,n,e){n=j(n,e);var r=[],o=[];return b.each(t,function(t,e,i){(n(t,e,i)?r:o).push(t)}),[r,o]},b.first=b.head=b.take=function(t,n,e){return null!=t?null==n||e?t[0]:b.initial(t,t.length-n):void 0},b.initial=function(t,n,e){return p.call(t,0,Math.max(0,t.length-(null==n||e?1:n)))},b.last=function(t,n,e){return null!=t?null==n||e?t[t.length-1]:b.rest(t,Math.max(0,t.length-n)):void 0},b.rest=b.tail=b.drop=function(t,n,e){return p.call(t,null==n||e?1:n)},b.compact=function(t){return b.filter(t,b.identity)};var T=function(t,n,e,r){for(var o=[],i=0,u=r||0,s=A(t);s>u;u++){var a=t[u];if(D(a)&&(b.isArray(a)||b.isArguments(a))){n||(a=T(a,n,e));var c=0,f=a.length;for(o.length+=f;f>c;)o[i++]=a[c++]}else e||(o[i++]=a)}return o};b.flatten=function(t,n){return T(t,n,!1)},b.without=function(t){return b.difference(t,p.call(arguments,1))},b.uniq=b.unique=function(t,n,e,r){b.isBoolean(n)||(r=e,e=n,n=!1),null!=e&&(e=j(e,r));for(var o=[],i=[],u=0,s=A(t);s>u;u++){var a=t[u],c=e?e(a,u,t):a;n?(u&&i===c||o.push(a),i=c):e?b.contains(i,c)||(i.push(c),o.push(a)):b.contains(o,a)||o.push(a)}return o},b.union=function(){return b.uniq(T(arguments,!0,!0))},b.intersection=function(t){for(var n=[],e=arguments.length,r=0,o=A(t);o>r;r++){var i=t[r];if(!b.contains(n,i)){for(var u=1;e>u&&b.contains(arguments[u],i);u++);u===e&&n.push(i)}}return n},b.difference=function(t){var n=T(arguments,!0,!0,1);return b.filter(t,function(t){return!b.contains(n,t)})},b.zip=function(){return b.unzip(arguments)},b.unzip=function(t){for(var n=t&&b.max(t,A).length||0,e=Array(n),r=0;n>r;r++)e[r]=b.pluck(t,r);return e},b.object=function(t,n){for(var e={},r=0,o=A(t);o>r;r++)n?e[t[r]]=n[r]:e[t[r][0]]=t[r][1];return e},b.findIndex=r(1),b.findLastIndex=r(-1),b.sortedIndex=function(t,n,e,r){e=j(e,r,1);for(var o=e(n),i=0,u=A(t);u>i;){var s=Math.floor((i+u)/2);e(t[s])<o?i=s+1:u=s}return i},b.indexOf=o(1,b.findIndex,b.sortedIndex),b.lastIndexOf=o(-1,b.findLastIndex),b.range=function(t,n,e){null==n&&(n=t||0,t=0),e=e||1;for(var r=Math.max(Math.ceil((n-t)/e),0),o=Array(r),i=0;r>i;i++,t+=e)o[i]=t;return o};var N=function(t,n,e,r,o){if(!(r instanceof n))return t.apply(e,o);var i=k(t.prototype),u=t.apply(i,o);return b.isObject(u)?u:i};b.bind=function(t,n){if(m&&t.bind===m)return m.apply(t,p.call(arguments,1));if(!b.isFunction(t))throw new TypeError("Bind must be called on a function");var e=p.call(arguments,2),r=function(){return N(t,r,n,this,e.concat(p.call(arguments)))};return r},b.partial=function(t){var n=p.call(arguments,1),e=function(){for(var r=0,o=n.length,i=Array(o),u=0;o>u;u++)i[u]=n[u]===b?arguments[r++]:n[u];for(;r<arguments.length;)i.push(arguments[r++]);return N(t,e,this,this,i)};return e},b.bindAll=function(t){var n,e,r=arguments.length;if(1>=r)throw new Error("bindAll must be passed function names");for(n=1;r>n;n++)e=arguments[n],t[e]=b.bind(t[e],t);return t},b.memoize=function(t,n){var e=function(r){var o=e.cache,i=""+(n?n.apply(this,arguments):r);return b.has(o,i)||(o[i]=t.apply(this,arguments)),o[i]};return e.cache={},e},b.delay=function(t,n){var e=p.call(arguments,2);return setTimeout(function(){return t.apply(null,e)},n)},b.defer=b.partial(b.delay,b,1),b.throttle=function(t,n,e){var r,o,i,u=null,s=0;e||(e={});var a=function(){s=e.leading===!1?0:b.now(),u=null,i=t.apply(r,o),u||(r=o=null)};return function(){var c=b.now();s||e.leading!==!1||(s=c);var f=n-(c-s);return r=this,o=arguments,0>=f||f>n?(u&&(clearTimeout(u),u=null),s=c,i=t.apply(r,o),u||(r=o=null)):u||e.trailing===!1||(u=setTimeout(a,f)),i}},b.debounce=function(t,n,e){var r,o,i,u,s,a=function(){var c=b.now()-u;n>c&&c>=0?r=setTimeout(a,n-c):(r=null,e||(s=t.apply(i,o),r||(i=o=null)))};return function(){i=this,o=arguments,u=b.now();var c=e&&!r;return r||(r=setTimeout(a,n)),c&&(s=t.apply(i,o),i=o=null),s}},b.wrap=function(t,n){return b.partial(n,t)},b.negate=function(t){return function(){return!t.apply(this,arguments)}},b.compose=function(){var t=arguments,n=t.length-1;return function(){for(var e=n,r=t[n].apply(this,arguments);e--;)r=t[e].call(this,r);return r}},b.after=function(t,n){return function(){return--t<1?n.apply(this,arguments):void 0}},b.before=function(t,n){var e;return function(){return--t>0&&(e=n.apply(this,arguments)),1>=t&&(n=null),e}},b.once=b.partial(b.before,2);var S=!{toString:null}.propertyIsEnumerable("toString"),C=["valueOf","isPrototypeOf","toString","propertyIsEnumerable","hasOwnProperty","toLocaleString"];b.keys=function(t){if(!b.isObject(t))return[];if(y)return y(t);var n=[];for(var e in t)b.has(t,e)&&n.push(e);return S&&i(t,n),n},b.allKeys=function(t){if(!b.isObject(t))return[];var n=[];for(var e in t)n.push(e);return S&&i(t,n),n},b.values=function(t){for(var n=b.keys(t),e=n.length,r=Array(e),o=0;e>o;o++)r[o]=t[n[o]];return r},b.mapObject=function(t,n,e){n=j(n,e);for(var r,o=b.keys(t),i=o.length,u={},s=0;i>s;s++)r=o[s],u[r]=n(t[r],r,t);return u},b.pairs=function(t){for(var n=b.keys(t),e=n.length,r=Array(e),o=0;e>o;o++)r[o]=[n[o],t[n[o]]];return r},b.invert=function(t){for(var n={},e=b.keys(t),r=0,o=e.length;o>r;r++)n[t[e[r]]]=e[r];return n},b.functions=b.methods=function(t){var n=[];for(var e in t)b.isFunction(t[e])&&n.push(e);return n.sort()},b.extend=x(b.allKeys),b.extendOwn=b.assign=x(b.keys),b.findKey=function(t,n,e){n=j(n,e);for(var r,o=b.keys(t),i=0,u=o.length;u>i;i++)if(r=o[i],n(t[r],r,t))return r},b.pick=function(t,n,e){var r,o,i={},u=t;if(null==u)return i;b.isFunction(n)?(o=b.allKeys(u),r=_(n,e)):(o=T(arguments,!1,!1,1),r=function(t,n,e){return n in e},u=Object(u));for(var s=0,a=o.length;a>s;s++){var c=o[s],f=u[c];r(f,c,u)&&(i[c]=f)}return i},b.omit=function(t,n,e){if(b.isFunction(n))n=b.negate(n);else{var r=b.map(T(arguments,!1,!1,1),String);n=function(t,n){return!b.contains(r,n)}}return b.pick(t,n,e)},b.defaults=x(b.allKeys,!0),b.create=function(t,n){var e=k(t);return n&&b.extendOwn(e,n),e},b.clone=function(t){return b.isObject(t)?b.isArray(t)?t.slice():b.extend({},t):t},b.tap=function(t,n){return n(t),t},b.isMatch=function(t,n){var e=b.keys(n),r=e.length;if(null==t)return!r;for(var o=Object(t),i=0;r>i;i++){var u=e[i];if(n[u]!==o[u]||!(u in o))return!1}return!0};var R=function(t,n,e,r){if(t===n)return 0!==t||1/t===1/n;if(null==t||null==n)return t===n;t instanceof b&&(t=t._wrapped),n instanceof b&&(n=n._wrapped);var o=h.call(t);if(o!==h.call(n))return!1;switch(o){case"[object RegExp]":case"[object String]":return""+t==""+n;case"[object Number]":return+t!==+t?+n!==+n:0===+t?1/+t===1/n:+t===+n;case"[object Date]":case"[object Boolean]":return+t===+n}var i="[object Array]"===o;if(!i){if("object"!=typeof t||"object"!=typeof n)return!1;var u=t.constructor,s=n.constructor;if(u!==s&&!(b.isFunction(u)&&u instanceof u&&b.isFunction(s)&&s instanceof s)&&"constructor"in t&&"constructor"in n)return!1}e=e||[],r=r||[];for(var a=e.length;a--;)if(e[a]===t)return r[a]===n;if(e.push(t),r.push(n),i){if(a=t.length,a!==n.length)return!1;for(;a--;)if(!R(t[a],n[a],e,r))return!1}else{var c,f=b.keys(t);if(a=f.length,b.keys(n).length!==a)return!1;for(;a--;)if(c=f[a],!b.has(n,c)||!R(t[c],n[c],e,r))return!1}return e.pop(),r.pop(),!0};b.isEqual=function(t,n){return R(t,n)},b.isEmpty=function(t){return null==t?!0:D(t)&&(b.isArray(t)||b.isString(t)||b.isArguments(t))?0===t.length:0===b.keys(t).length},b.isElement=function(t){return!(!t||1!==t.nodeType)},b.isArray=v||function(t){return"[object Array]"===h.call(t)},b.isObject=function(t){var n=typeof t;return"function"===n||"object"===n&&!!t},b.each(["Arguments","Function","String","Number","Date","RegExp","Error"],function(t){b["is"+t]=function(n){return h.call(n)==="[object "+t+"]"}}),b.isArguments(arguments)||(b.isArguments=function(t){return b.has(t,"callee")}),"function"!=typeof/./&&"object"!=typeof Int8Array&&(b.isFunction=function(t){return"function"==typeof t||!1}),b.isFinite=function(t){return isFinite(t)&&!isNaN(parseFloat(t))},b.isNaN=function(t){return b.isNumber(t)&&t!==+t},b.isBoolean=function(t){return t===!0||t===!1||"[object Boolean]"===h.call(t)},b.isNull=function(t){return null===t},b.isUndefined=function(t){return void 0===t},b.has=function(t,n){return null!=t&&d.call(t,n)},b.noConflict=function(){return u._=s,this},b.identity=function(t){return t},b.constant=function(t){return function(){return t}},b.noop=function(){},b.property=O,b.propertyOf=function(t){return null==t?function(){}:function(n){return t[n]}},b.matcher=b.matches=function(t){return t=b.extendOwn({},t),function(n){return b.isMatch(n,t)}},b.times=function(t,n,e){var r=Array(Math.max(0,t));n=_(n,e,1);for(var o=0;t>o;o++)r[o]=n(o);return r},b.random=function(t,n){return null==n&&(n=t,t=0),t+Math.floor(Math.random()*(n-t+1))},b.now=Date.now||function(){return(new Date).getTime()};var I={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#x27;","`":"&#x60;"},F=b.invert(I),M=function(t){var n=function(n){return t[n]},e="(?:"+b.keys(t).join("|")+")",r=RegExp(e),o=RegExp(e,"g");return function(t){return t=null==t?"":""+t,r.test(t)?t.replace(o,n):t}};b.escape=M(I),b.unescape=M(F),b.result=function(t,n,e){var r=null==t?void 0:t[n];return void 0===r&&(r=e),b.isFunction(r)?r.call(t):r};var z=0;b.uniqueId=function(t){var n=++z+"";return t?t+n:n},b.templateSettings={evaluate:/<%([\s\S]+?)%>/g,interpolate:/<%=([\s\S]+?)%>/g,escape:/<%-([\s\S]+?)%>/g};var B=/(.)^/,U={"'":"'","\\":"\\","\r":"r","\n":"n","\u2028":"u2028","\u2029":"u2029"},P=/\\|'|\r|\n|\u2028|\u2029/g,q=function(t){return"\\"+U[t]};b.template=function(t,n,e){!n&&e&&(n=e),n=b.defaults({},n,b.templateSettings);var r=RegExp([(n.escape||B).source,(n.interpolate||B).source,(n.evaluate||B).source].join("|")+"|$","g"),o=0,i="__p+='";t.replace(r,function(n,e,r,u,s){return i+=t.slice(o,s).replace(P,q),o=s+n.length,e?i+="'+\n((__t=("+e+"))==null?'':_.escape(__t))+\n'":r?i+="'+\n((__t=("+r+"))==null?'':__t)+\n'":u&&(i+="';\n"+u+"\n__p+='"),n}),i+="';\n",n.variable||(i="with(obj||{}){\n"+i+"}\n"),i="var __t,__p='',__j=Array.prototype.join,print=function(){__p+=__j.call(arguments,'');};\n"+i+"return __p;\n";try{var u=new Function(n.variable||"obj","_",i)}catch(s){throw s.source=i,s}var a=function(t){return u.call(this,t,b)},c=n.variable||"obj";return a.source="function("+c+"){\n"+i+"}",a},b.chain=function(t){var n=b(t);return n._chain=!0,n};var V=function(t,n){return t._chain?b(n).chain():n};b.mixin=function(t){b.each(b.functions(t),function(n){var e=b[n]=t[n];b.prototype[n]=function(){var t=[this._wrapped];return l.apply(t,arguments),V(this,e.apply(b,t))}})},b.mixin(b),b.each(["pop","push","reverse","shift","sort","splice","unshift"],function(t){var n=a[t];b.prototype[t]=function(){var e=this._wrapped;return n.apply(e,arguments),"shift"!==t&&"splice"!==t||0!==e.length||delete e[0],V(this,e)}}),b.each(["concat","join","slice"],function(t){var n=a[t];b.prototype[t]=function(){return V(this,n.apply(this._wrapped,arguments))}}),b.prototype.value=function(){return this._wrapped},b.prototype.valueOf=b.prototype.toJSON=b.prototype.value,b.prototype.toString=function(){return""+this._wrapped},"function"==typeof define&&define.amd&&define("underscore",[],function(){return b})}).call(this)},{}]},{},[1]);
//# sourceMappingURL=data:application/json;base64,
