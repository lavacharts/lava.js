{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/tiny-emitter/index.js","webpack:///./src/Errors.ts","webpack:///./src/DataQuery.ts","webpack:///./src/lib/datatable.ts","webpack:///./src/lib/logger.ts","webpack:///./src/lib/options.ts","webpack:///./src/VisualizationProps.ts","webpack:///./src/lib/index.ts","webpack:///./src/Renderable.ts","webpack:///./src/Chart.ts","webpack:///./src/Dashboard.ts","webpack:///./src/GoogleLoader.ts","webpack:///./src/LavaJs.ts","webpack:///./src/lib/lavacharts.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","E","on","callback","ctx","e","this","push","fn","once","self","listener","off","apply","arguments","_","emit","data","slice","evtArr","len","length","evts","liveEvents","TinyEmitter","LavaJsError","message","Error","InvalidCallback","RenderableNotFound","label","DataError","msg","ElementIdNotFound","elemId","DataQuery","url","opts","transformer","sendMethod","query","payload","window","google","visualization","Query","Promise","resolve","reject","send","response","isError","createDataTable","DataTable","getType","arrayToDataTable","getTableProperties","join","keys","joinMethod","dt1Columns","dt2Columns","Logger","version","VERSION","console","log","group","groupEnd","args","format","error","defaultOptions","autoRun","datetimeFormat","debounceTimeout","locale","mapsApiKey","responsive","timezone","VIZ_PROPS","toString","propMap","AnnotationChart","AreaChart","BarChart","BubbleChart","CalendarChart","CandlestickChart","ColumnChart","ComboChart","DonutChart","GanttChart","GaugeChart","GeoChart","HistogramChart","LineChart","PieChart","SankeyChart","ScatterChart","SteppedAreaChart","TableChart","TimelineChart","TreeMapChart","WordTreeChart","getProp","chart","prop","Renderable","json","type","dataSrc","elementId","options","formats","CLASS","PACKAGE","_preDraw","logger","uuid","preDraw","googleChart","draw","_postDraw","postDraw","container","setData","applyFormats","getDataTable","formatter","index","assign","document","getElementById","Chart","png","Boolean","chartFactory","drawPng","img","createElement","src","getImageURI","innerHTML","appendChild","Dashboard","bindings","GoogleLoader","Set","pkgs","packages","add","googleLoaderInPage","addGoogleScriptToHead","charts","load","API_VERSION","config","setOnLoadCallback","script","async","LOADER_URL","onload","onreadystatechange","event","test","readyState","head","scripts","getElementsByTagName","Array","from","language","LavaJs","Map","configure","loader","isLoaded","loadGoogle","attachRedrawHandler","renderAll","readyCallback","promises","volcano","forEach","renderable","run","addPackage","set","renderables","store","has","updateData","updateOptions","size","debounced","target","useCapture","addEventListener","attachEvent","addEvent","clearTimeout","setTimeout","redrawAll","lava","lavacharts","autorun","then"],"mappings":"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","file":"lavacharts.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","function E () {\n  // Keep this empty so it's easier to inherit from\n  // (via https://github.com/lipsmack from https://github.com/scottcorgan/tiny-emitter/issues/3)\n}\n\nE.prototype = {\n  on: function (name, callback, ctx) {\n    var e = this.e || (this.e = {});\n\n    (e[name] || (e[name] = [])).push({\n      fn: callback,\n      ctx: ctx\n    });\n\n    return this;\n  },\n\n  once: function (name, callback, ctx) {\n    var self = this;\n    function listener () {\n      self.off(name, listener);\n      callback.apply(ctx, arguments);\n    };\n\n    listener._ = callback\n    return this.on(name, listener, ctx);\n  },\n\n  emit: function (name) {\n    var data = [].slice.call(arguments, 1);\n    var evtArr = ((this.e || (this.e = {}))[name] || []).slice();\n    var i = 0;\n    var len = evtArr.length;\n\n    for (i; i < len; i++) {\n      evtArr[i].fn.apply(evtArr[i].ctx, data);\n    }\n\n    return this;\n  },\n\n  off: function (name, callback) {\n    var e = this.e || (this.e = {});\n    var evts = e[name];\n    var liveEvents = [];\n\n    if (evts && callback) {\n      for (var i = 0, len = evts.length; i < len; i++) {\n        if (evts[i].fn !== callback && evts[i].fn._ !== callback)\n          liveEvents.push(evts[i]);\n      }\n    }\n\n    // Remove event from queue to prevent memory leak\n    // Suggested by https://github.com/lazd\n    // Ref: https://github.com/scottcorgan/tiny-emitter/commit/c6ebfaa9bc973b33d110a84a307742b7cf94c953#commitcomment-5024910\n\n    (liveEvents.length)\n      ? e[name] = liveEvents\n      : delete e[name];\n\n    return this;\n  }\n};\n\nmodule.exports = E;\nmodule.exports.TinyEmitter = E;\n","/**\n * LavaJsError Error\n *\n * Base error that the specific errors extend.\n */\nexport class LavaJsError extends Error {\n  constructor(message = \"There was an error\") {\n    super(message);\n  }\n}\n\n/**\n * InvalidCallback Error\n *\n * Thrown when anything but a function is given as a callback.\n */\nexport class InvalidCallback extends LavaJsError {\n  constructor(callback: any) {\n    super(`[lava.js] \"${typeof callback}\" is not a valid callback.`);\n  }\n}\n\n/**\n * InvalidLabel Error\n *\n * Thrown when a {@link Renderable} is not found in the module.\n */\nexport class RenderableNotFound extends LavaJsError {\n  constructor(label: string) {\n    super(`[lava.js] A renderable with the label \"${label}\" was not found.`);\n  }\n}\n\n/**\n * ElementIdNotFound Error\n *\n * Thrown when the given ID for an HTMLElement is not found in the DOM.\n */\nexport class DataError extends LavaJsError {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n\n/**\n * ElementIdNotFound Error\n *\n * Thrown when the given ID for an HTMLElement is not found in the DOM.\n */\nexport class ElementIdNotFound extends LavaJsError {\n  constructor(elemId: string) {\n    super(`[lava.js] DOM node where id=\"${elemId}\" was not found.`);\n  }\n}\n","import { DataError } from \"./Errors\";\nimport {\n  GoogleQuery,\n  GoogleQueryOptions,\n  GoogleQueryResponse,\n  QueryTransformer\n} from \"./types/google\";\n\n/**\n * Used for loading remote data as a {@link DataTable}\n *\n * @see https://developers.google.com/chart/interactive/docs/reference#Query\n * @class\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   http://opensource.org/licenses/MIT MIT\n */\nexport default class DataQuery {\n  public transformer: QueryTransformer;\n\n  public opts: GoogleQueryOptions;\n\n  /**\n   * Create a new DataQuery for a DataTable\n   *\n   * @throws {DataError}\n   */\n  constructor(\n    public url: string,\n    opts?: GoogleQueryOptions,\n    transformer?: QueryTransformer\n  ) {\n    this.opts = { sendMethod: \"auto\" };\n    this.transformer = (query: GoogleQuery): GoogleQuery => query;\n\n    if (transformer) {\n      this.transformer = transformer;\n    }\n\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n\n  /**\n   * create a new DataQuery based on the given payload\n   *\n   * @throws {DataError}\n   */\n  public static create(payload: DataQuery): DataQuery {\n    if (!payload.url) {\n      throw new DataError(\n        '\"url\" is a mandatory parameter for creating a DataQuery.'\n      );\n    }\n\n    const query = new DataQuery(payload.url);\n\n    if (typeof payload.opts === \"object\") {\n      query.opts = payload.opts as GoogleQueryOptions;\n    }\n\n    if (typeof payload.transformer === \"function\") {\n      query.transformer = payload.transformer as QueryTransformer;\n    }\n\n    return query;\n  }\n\n  /**\n   * Send the DataQuery\n   */\n  public send(): Promise<GoogleQueryResponse> {\n    const query = new window.google.visualization.Query(this.url, this.opts);\n\n    return new Promise((resolve, reject) => {\n      this.transformer(query).send(response => {\n        if (response.isError()) {\n          reject(response);\n        }\n\n        resolve(response);\n      });\n    });\n  }\n}\n","import { getType } from \".\";\n\n/**\n * Sets the data for the chart by creating a new DataTable\n *\n * @param {Object|Function|Array} payload Json representation of a DataTable\n */\nexport function createDataTable(payload: any): google.visualization.DataTable {\n  // If a function is received, then create an new DataTable and pass it to the\n  // function for user modifications.\n  if (typeof payload === \"function\") {\n    return payload(new window.google.visualization.DataTable());\n  }\n\n  // If an Array is received, then attempt to use parse with arrayToDataTable.\n  if (getType(payload) === \"Array\") {\n    return window.google.visualization.arrayToDataTable(payload);\n  }\n\n  // Since Google compiles their classes, we can't use instanceof to check since\n  // it is no longer called a \"DataTable\" (it's \"gvjs_P\" but that could change...)\n  // If this check passes, then it already is a DataTable\n  if (getType(payload.getTableProperties) === \"Function\") {\n    return payload;\n  }\n\n  // If the payload is from the php class JoinedDataTable->toJson(), then create\n  // two new DataTables and join them with the defined options.\n  if (getType(payload.data) === \"Array\") {\n    return window.google.visualization.data.join(\n      new window.google.visualization.DataTable(payload.data[0]),\n      new window.google.visualization.DataTable(payload.data[1]),\n      payload.keys,\n      payload.joinMethod,\n      payload.dt1Columns,\n      payload.dt2Columns\n    );\n  }\n\n  // If a php DataTable->toJson() payload is received, with formatted columns,\n  // then payload.data will be defined. Use this to create the DataTable.\n  if (getType(payload.data) === \"Object\") {\n    // eslint-disable-next-line no-param-reassign\n    payload = payload.data;\n  }\n\n  // If we reach here, then it must be standard JSON for creating a DataTable.\n  return new window.google.visualization.DataTable(payload);\n}\n","import { VERSION } from \"../LavaJs\";\n\nexport class Logger {\n  constructor(version: string = VERSION) {\n    console.log(`Initializing lava.js v${version}`); //@TODO\n  }\n\n  public grouped(msg: string, group: Function): void {\n    console.group(msg);\n    group();\n    console.groupEnd();\n  }\n\n  public log(msg: string, ...args: any[]): void {\n    console.log(this.format(msg), ...args);\n  }\n\n  public err(msg: string, ...args: any[]): void {\n    console.error(this.format(msg), ...args);\n  }\n\n  private format(msg: string): string {\n    return `[lava.js] ${msg}`;\n  }\n}\n","import { LavaJsOptions } from \"../types\";\n\nexport const defaultOptions = {\n  autoRun: true,\n  datetimeFormat: \"\",\n  debounceTimeout: 250,\n  locale: \"en\",\n  mapsApiKey: \"\",\n  responsive: true,\n  timezone: \"America/Los_Angeles\"\n} as LavaJsOptions;\n","// import { VizProps } from \"./types/chart\";\nimport { SupportedCharts } from \"./types/strings\";\n\nexport enum VIZ_PROPS {\n  \"CLASS\" = 0,\n  \"PACKAGE\" = 1,\n  \"VERSION\" = 2\n}\n\ntype VisualizationPropertyDict = {\n  [K in SupportedCharts]: [string, string, number];\n};\n\nconst propMap = {\n  AnnotationChart: [\"AnnotationChart\", \"annotationchart\", 1],\n  AreaChart: [\"AreaChart\", \"corechart\", 1],\n  BarChart: [\"BarChart\", \"corechart\", 1],\n  BubbleChart: [\"BubbleChart\", \"corechart\", 1],\n  CalendarChart: [\"Calendar\", \"calendar\", 1],\n  CandlestickChart: [\"CandlestickChart\", \"corechart\", 1],\n  ColumnChart: [\"ColumnChart\", \"corechart\", 1],\n  ComboChart: [\"ComboChart\", \"corechart\", 1],\n  DonutChart: [\"PieChart\", \"corechart\", 1],\n  GanttChart: [\"Gantt\", \"gantt\", 1],\n  GaugeChart: [\"Gauge\", \"gauge\", 1],\n  GeoChart: [\"GeoChart\", \"geochart\", 1],\n  HistogramChart: [\"Histogram\", \"corechart\", 1],\n  LineChart: [\"LineChart\", \"corechart\", 1],\n  PieChart: [\"PieChart\", \"corechart\", 1],\n  SankeyChart: [\"Sankey\", \"sankey\", 1],\n  ScatterChart: [\"ScatterChart\", \"corechart\", 1],\n  SteppedAreaChart: [\"SteppedAreaChart\", \"corechart\", 1],\n  TableChart: [\"Table\", \"table\", 1],\n  TimelineChart: [\"Timeline\", \"timeline\", 1],\n  TreeMapChart: [\"TreeMap\", \"treemap\", 1],\n  WordTreeChart: [\"WordTree\", \"wordtree\", 1]\n} as VisualizationPropertyDict;\n\nexport function getProp(chart: SupportedCharts, prop: number): any {\n  return propMap[chart][prop];\n}\n","import { createDataTable } from \"./datatable\";\nimport { Logger } from \"./logger\";\nimport { defaultOptions } from \"./options\";\nimport Queue from \"./queue\";\n\nexport { Logger, defaultOptions, createDataTable, Queue };\n\n/**\n * Returns the type of object, with a capital first letter.\n */\nexport function getType(object: any): string {\n  return Object.prototype.toString.call(object).slice(8, -1);\n}\n\n/**\n * Simple Promise for the DOM to be ready.\n */\nexport function domLoaded(): Promise<void> {\n  return new Promise(resolve => {\n    if (\n      document.readyState === \"interactive\" ||\n      document.readyState === \"complete\"\n    ) {\n      resolve();\n    } else {\n      document.addEventListener(\"DOMContentLoaded\", () => resolve);\n    }\n  });\n}\n\n/**\n * Method for attaching events to objects.\n *\n * @link http://stackoverflow.com/a/3150139 Credit to Alex V.\n */\nexport function addEvent(\n  target: any,\n  type: string,\n  callback: Function,\n  useCapture = false\n): void {\n  if (target === null || typeof target === \"undefined\") {\n    return;\n  }\n\n  if (target.addEventListener) {\n    target.addEventListener(type, callback, useCapture);\n  } else if (target.attachEvent) {\n    target.attachEvent(\"on\" + type, callback);\n  } else {\n    target[\"on\" + type] = callback;\n  }\n}\n","import { TinyEmitter } from \"tiny-emitter\";\n\nimport DataQuery from \"./DataQuery\";\nimport { DataError, ElementIdNotFound } from \"./Errors\";\nimport { logger } from \"./LavaJs\";\nimport { createDataTable } from \"./lib\";\nimport {\n  ChartClasses,\n  ChartUpdateReturn,\n  Formatter,\n  RenderableTmpl,\n  RenderableType,\n  SupportedCharts\n} from \"./types\";\nimport { getProp, VIZ_PROPS } from \"./VisualizationProps\";\n\n/**\n * The {@link Renderable} class is the base for {@link Chart}s and {@link Dashboard}s\n * to share common methods between the two types.\n *\n *\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   MIT\n */\nexport default class Renderable extends TinyEmitter {\n  [K: string]: any;\n\n  /**\n   * Unique label for the {@link Chart} / {@link Dashboard}.\n   */\n  public readonly label: string;\n\n  /**\n   * Configurable options.\n   */\n  public options: Record<string, any>;\n\n  /**\n   * DataTable for the {@link Chart} / {@link Dashboard}.\n   */\n  public data!: google.visualization.DataTable;\n\n  /**\n   * PreDraw hook\n   */\n  public preDraw!: Function;\n\n  /**\n   * PostDraw hook\n   */\n  public postDraw!: Function;\n\n  /**\n   * Google chart object created once the {@link Chart} / {@link Dashboard}\n   * has been rendered.\n   */\n  public googleChart: any;\n\n  /**\n   * Type of {@link Renderable}.\n   */\n  public readonly type: SupportedCharts | RenderableType;\n\n  /**\n   * The google.visualization class needed for rendering.\n   */\n  public readonly class: ChartClasses;\n\n  /**\n   * The google.visualization package needed for rendering.\n   */\n  public readonly package: string;\n\n  /**\n   * Element ID of the DOM node for the container.\n   */\n  public readonly elementId: string;\n\n  /**\n   * Formatters for the DataTable\n   */\n  protected formats: Formatter[];\n\n  /**\n   * The source of the DataTable, to be used in setData().\n   */\n  private dataSrc: any;\n\n  /**\n   * Create a new Renderable\n   *\n   * @param {Object} json\n   */\n  constructor(json: RenderableTmpl) {\n    super();\n\n    this.type = json.type;\n    this.label = json.label;\n    this.dataSrc = json.data;\n    this.elementId = json.elementId;\n\n    this.options = json.options || {};\n    this.formats = json.formats || [];\n\n    this.class = getProp(this.type as SupportedCharts, VIZ_PROPS.CLASS);\n    this.package = getProp(this.type as SupportedCharts, VIZ_PROPS.PACKAGE);\n  }\n\n  /**\n   * Unique identifier for the {@link Chart} / {@link Dashboard}.\n   */\n  public get uuid(): string {\n    return this.type + \"::\" + this.label;\n  }\n\n  /**\n   * HTMLElement into which the chart will be rendered.\n   */\n  public get container(): HTMLElement | null {\n    return document.getElementById(this.elementId);\n  }\n\n  /**\n   * Draws the {@link Chart} / {@link Dashboard} with the predefined data and options.\n   *\n   * @public\n   */\n  public draw(): void {\n    if (typeof this._preDraw === \"function\") {\n      logger.log(`Firing ${this.uuid}._preDraw()`);\n\n      this._preDraw();\n    }\n\n    if (typeof this.preDraw === \"function\") {\n      logger.log(`Firing ${this.uuid}.preDraw()`);\n\n      this.preDraw();\n    }\n\n    if (!this.data) {\n      throw new DataError(`${this.uuid} Could not draw, data is ${this.data}`);\n    }\n\n    this.googleChart.draw(this.data, this.options);\n\n    if (typeof this._postDraw === \"function\") {\n      logger.log(`Firing ${this.uuid}._postDraw()`);\n\n      this._postDraw();\n    }\n\n    if (typeof this.postDraw === \"function\") {\n      logger.log(`Firing ${this.uuid}.postDraw()`);\n\n      this.postDraw();\n    }\n  }\n\n  /**\n   * Run the setup and draw the chart.\n   *\n   * Any dependency on \"google\" must be within the run() scope.\n   *\n   * This will be called after the static loaded has completed\n   * registering window.google\n   *\n   * @return {Promise}\n   */\n  async run(): Promise<any> {\n    if (!this.container) {\n      throw new ElementIdNotFound(this.elementId);\n    }\n\n    // this.attachEventRelays();\n\n    await this.setData(this.dataSrc);\n\n    if (this.formats) {\n      this.applyFormats();\n    }\n\n    this.draw();\n  }\n\n  /**\n   * Sets the {@link DataTable} for the {@link Renderable}.\n   *\n   * @public\n   * @param {Object|Function|Array|DataQuery|DataTable} payload Source of data\n   */\n  public async setData(payload: any): Promise<void> {\n    if (payload instanceof DataQuery) {\n      logger.log(`Firing DataQuery for ${this.uuid}`);\n\n      const response = await payload.send();\n\n      logger.log(`Response received:`, response);\n\n      this.data = response.getDataTable();\n    } else {\n      this.data = createDataTable(payload);\n    }\n\n    if (this.data instanceof google.visualization.DataTable === false) {\n      throw new DataError(\n        `There was a error setting the data for ${this.uuid}`\n      );\n    }\n\n    logger.log(`Setting data for ${this.uuid}`, this.data);\n\n    if (payload.formats) {\n      this.applyFormats(payload.formats);\n    }\n  }\n\n  /**\n   * Apply the formats to the DataTable\n   */\n  public applyFormats(formats?: Formatter[]): void {\n    if (formats) {\n      this.formats = formats;\n    }\n\n    for (const format of this.formats) {\n      const formatter = new window.google.visualization[format.type](\n        format.options\n      );\n\n      logger.log(`Setting data for ${this.uuid}.`);\n      logger.log(`Formatting column [${format.index}] with:`, format);\n\n      formatter.format(this.data, format.index);\n    }\n  }\n\n  /**\n   * Loads new data into the renderable and redraws.\n   *\n   * Used with an AJAX call to a PHP method returning DataTable->toPayload(),\n   * a chart can be dynamically update in page, without reloads.\n   */\n  public async updateData(payload: object): Promise<ChartUpdateReturn> {\n    await this.setData(payload);\n\n    this.draw();\n\n    return {\n      data: this.data,\n      chart: this.googleChart,\n      options: this.options\n    };\n  }\n\n  /**\n   * Loads new options into the renderable and redraws.\n   *\n   * Used with an AJAX call, or javascript events, to load a new array of options into a chart.\n   * This can be used to update a chart dynamically, without reloads.\n   */\n  public async updateOptions(payload: object): Promise<ChartUpdateReturn> {\n    this.options = Object.assign(this.options, payload);\n\n    this.draw();\n\n    return {\n      data: this.data,\n      chart: this.googleChart,\n      options: this.options\n    };\n  }\n\n  /**\n   * Attach event emitters onto the google chart to relay the events\n   * forward onto the lavachart.\n   *\n   * The Google Chart and DataTable objects will be passed to the listener\n   * callback for interaction.\n   */\n  // protected attachEventRelays(): void {\n  //   const events = [\"ready\", \"select\", \"error\", \"onmouseover\", \"onmouseout\"];\n\n  //   for (const event in events) {\n  //     window.google.visualization.events.addListener(this.googleChart, event, () =>\n  //       this.emit(event, {\n  //         chart: this.googleChart,\n  //         data: this.data\n  //       })\n  //     );\n  //   }\n  // }\n}\n","import Renderable from \"./Renderable\";\nimport { RenderableTmpl } from \"./types\";\nimport { ChartFactory } from \"./types/chart\";\n\nfunction makeChartFactory(container: HTMLElement): ChartFactory {\n  return type => new window.google.visualization[type](container);\n}\n\n/**\n * Chart Class\n *\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   MIT\n */\nexport default class Chart extends Renderable {\n  /**\n   * If this is set to true, then the {@link Chart} will be output as a PNG\n   *\n   * @type {Boolean}\n   */\n  png: boolean;\n\n  events!: Array<any>;\n\n  /**\n   * Create a new Chart.\n   *\n   * @exampl\n   * {\n   *     label: 'Test',\n   *     type: 'PieChart',\n   *     elementId: 'my-pie-chart',\n   *     datatable: [\n   *         ['Task', 'Hours per Day'],\n   *         ['Work',     11],\n   *         ['Eat',      2],\n   *         ['Commute',  2],\n   *         ['Watch TV', 2],\n   *         ['Sleep',    7]\n   *     ],\n   *     options: {\n   *         title: 'My Daily Activities'\n   *     }\n   * }\n   */\n  constructor(payload: RenderableTmpl) {\n    super(payload);\n\n    this.png = Boolean(payload.png);\n  }\n\n  /**\n   * Actions to perform before drawing the {@link Chart}\n   *\n   * This method will have access to window.google since it is called\n   * within the render method.\n   */\n  protected _preDraw(): void {\n    const chartFactory = makeChartFactory(this.container as HTMLElement);\n\n    this.googleChart = chartFactory(this.class);\n\n    // TODO: append Lavachart defined events?\n    // if (this.events) {\n    //     this.attachEvents();\n    // }\n  }\n\n  /**\n   * Actions to perform once the {@link Chart} has been drawn\n   *\n   * This method will have access to window.google since it is called\n   * within the run method.\n   * @private\n   */\n  protected _postDraw(): void {\n    if (this.png) {\n      this.drawPng();\n    }\n  }\n\n  /**\n   * Draws the chart as a PNG instead of the standard SVG\n   *\n   * @private\n   * @see https://developers.google.com/chart/interactive/docs/printing\n   */\n  private drawPng(): void {\n    const img = document.createElement(\"img\");\n    img.src = this.googleChart.getImageURI();\n\n    if (this.container) {\n      this.container.innerHTML = \"\";\n      this.container.appendChild(img);\n    }\n  }\n\n  /**\n   * Attach the defined chart event handlers.\n   *\n   * @private\n   * @return {void}\n   */\n  // private attachEvents(): void {\n  //   this.events.forEach((callback: Function, event: any) => {\n  //     let context = window;\n  //     let func = callback;\n\n  //     if (typeof callback === \"object\") {\n  //       // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n  //       //@ts-ignore I don't know what to do here\n  //       context = context[callback[0]];\n  //       func = callback[1];\n  //     }\n\n  //     log(\n  //       `The \"${this.uuid}::${event}\" event will be handled by \"${func}\" in the context`,\n  //       context\n  //     );\n\n  //     /**\n  //      * Set the context of \"this\" within the user provided callback to the\n  //      * chart that fired the event while providing the datatable of the chart\n  //      * to the callback as an argument.\n  //      */\n  //     window.google.visualization.events.addListener(this.googleChart, event, () => {\n  //       const callback = Object.bind(\n  //         context[Object.call.prototype.toString(func)],\n  //         this.googleChart\n  //       ) as (data: google.visualization.DataTable) => any;\n\n  //       callback(this.data);\n  //     });\n  //   });\n  // }\n}\n","import Renderable from \"./Renderable\";\n/**\n * Dashboard Class\n *\n * @class\n * @module    module:LavaJs/Dashboard\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   MIT\n */\nexport default class Dashboard extends Renderable {\n  bindings: any;\n\n  /**\n   * Create a new Dashboard\n   *\n   * @param {Object} json JSON object representing a Dashboard.\n   */\n  constructor(json: any) {\n    json.type = \"Dashboard\";\n\n    super(json);\n\n    this.googleChart = new window.google.visualization.Dashboard(this\n      .container as HTMLElement);\n\n    this.bindings = json.bindings;\n\n    // this._attachBindings();\n  }\n\n  /**\n   * Process and attach the bindings to the dashboard.\n   *\n   * @TODO: Needs to be modified and tested for the other types of bindings.\n   */\n  // private _attachBindings(): void {\n  //   for (const binding of this.bindings) {\n  //     const controlWraps = [];\n  //     const chartWraps = [];\n\n  //     for (const controlWrap of binding.controlWrappers) {\n  //       controlWraps.push(new google.visualization.ControlWrapper(controlWrap));\n  //     }\n\n  //     for (const chartWrap of binding.chartWrappers) {\n  //       chartWraps.push(new google.visualization.ChartWrapper(chartWrap));\n  //     }\n\n  //     this.googleChart.bind(controlWraps, chartWraps);\n  //   }\n  // }\n}\n","import { logger } from \"./LavaJs\";\nimport { Google, GoogleLoaderOptions, LavaJsOptions } from \"./types\";\n\nexport default class GoogleLoader {\n  /**\n   * Version of the Google charts API to load\n   */\n  API_VERSION = \"current\";\n\n  /**\n   * Url to Google's static loader\n   */\n  LOADER_URL = \"https://www.gstatic.com/charts/loader.js\";\n\n  /**\n   * Packages to load\n   */\n  private packages: Set<string> = new Set();\n\n  constructor(private options: LavaJsOptions) {}\n\n  /**\n   * Flag that will be true once window.google is available in page.\n   */\n  public get isLoaded(): boolean {\n    return typeof window.google !== \"undefined\";\n  }\n\n  /**\n   * Flag that will be true once Google's Static Loader is in page.\n   */\n  public get googleLoaderInPage(): boolean {\n    const scripts = document.getElementsByTagName(\"script\");\n\n    for (const script of Array.from(scripts)) {\n      if (script.src === this.LOADER_URL) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the options for the google loader.\n   */\n  public get config(): GoogleLoaderOptions {\n    const config: GoogleLoaderOptions = {\n      language: this.options.locale || \"en\",\n      packages: Array.from(this.packages)\n    };\n\n    if (this.options.mapsApiKey !== \"\") {\n      config.mapsApiKey = this.options.mapsApiKey;\n    }\n\n    return config;\n  }\n\n  /**\n   * Get a reference to the window.google object or load it if needed.\n   */\n  // public async getGoogle(): Promise<Google> {\n  //   if (this.isLoaded) {\n  //     return window.google;\n  //   }\n\n  //   return this.loadGoogle();\n  // }\n\n  /**\n   * Add one package to the list that Google needs to load.\n   */\n  public addPackage(pkgs: string): void {\n    this.packages.add(pkgs);\n  }\n\n  /**\n   * Load the Google Static Loader and resolve the promise when ready.\n   */\n  public async loadGoogle(): Promise<Google> {\n    logger.log(\"Resolving Google...\");\n\n    if (this.googleLoaderInPage === false) {\n      logger.log(\"Static loader not found, appending to head\");\n\n      await this.addGoogleScriptToHead();\n    }\n\n    return new Promise(resolve => {\n      logger.log(\"Static loader found, initializing window.google\");\n\n      window.google.charts.load(this.API_VERSION, this.config);\n\n      logger.log(\"Loaded Google with config:\", this.config);\n\n      window.google.charts.setOnLoadCallback(() => {\n        resolve(window.google);\n      });\n    });\n  }\n\n  /**\n   * Create a new script tag for the Google Static Loader\n   */\n  private addGoogleScriptToHead(): Promise<void> {\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\") as ScriptElement;\n\n      script.type = \"text/javascript\";\n      script.async = true;\n      script.src = this.LOADER_URL;\n      script.onload = script.onreadystatechange = (event: Event) => {\n        // eslint-disable-next-line no-param-reassign\n        event = event || window.event;\n\n        if (\n          event.type === \"load\" ||\n          /loaded|complete/.test(script.readyState)\n        ) {\n          script.onload = script.onreadystatechange = null;\n\n          resolve();\n        }\n      };\n\n      document.head.appendChild(script);\n    });\n  }\n}\n","import { TinyEmitter } from \"tiny-emitter\";\n\nimport Chart from \"./Chart\";\nimport Dashboard from \"./Dashboard\";\nimport DataQuery from \"./DataQuery\";\nimport { InvalidCallback, RenderableNotFound } from \"./Errors\";\nimport GoogleLoader from \"./GoogleLoader\";\nimport { addEvent, defaultOptions, Logger } from \"./lib\";\nimport Renderable from \"./Renderable\";\nimport { ChartUpdateReturn, LavaJsOptions, RenderableTmpl } from \"./types\";\n\n/**\n * Version of the LavaJs module\n */\nexport const VERSION = \"4.0.0-beta3\";\n\nexport const logger = new Logger(VERSION);\n\n/**\n * Google Chart API wrapper library\n *\n * This module can be used as a standalone, browser based library, or in\n * conjunction with the PHP library, <a href=\"https://github.com/kevinkhill/lavacharts\">Lavacharts</a>.\n *\n * @class\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   http://opensource.org/licenses/MIT MIT\n */\nexport default class LavaJs extends TinyEmitter {\n  static readonly logger = logger;\n\n  /**\n   * Version of the LavaJs module\n   */\n  static readonly VERSION = \"__VERSION__\";\n\n  /**\n   * Configurable options for the library\n   */\n  private options: LavaJsOptions = defaultOptions;\n\n  /**\n   * Chart storage\n   */\n  private readonly volcano: Map<string, Renderable> = new Map();\n\n  /**\n   * Ready Callback\n   */\n  private readyCallback!: Function;\n\n  /**\n   * Loader class for appending the google script and making window.google available\n   */\n  private readonly loader: GoogleLoader;\n\n  /**\n   * Create a new instance of the LavaJs library\n   */\n  constructor(options?: LavaJsOptions) {\n    super();\n\n    if (options) this.configure(options);\n\n    this.loader = new GoogleLoader(this.options);\n  }\n\n  /**\n   * Forward the autoRun option to the main object to check in page.\n   */\n  get autorun(): boolean {\n    return typeof this.options.autoRun === \"undefined\"\n      ? true\n      : this.options.autoRun;\n  }\n\n  /**\n   * Configure the LavaJs module.\n   */\n  public configure(options: LavaJsOptions): void {\n    this.options = Object.assign(this.options, options);\n  }\n\n  /**\n   * Initializes the library by loading google to the window.\n   */\n  public async loadGoogle(): Promise<any> {\n    if (this.loader.isLoaded === false) {\n      await this.loader.loadGoogle();\n    }\n  }\n\n  /**\n   * Runs the LavaJs.js module\n   *\n   * @emits {ready}\n   */\n  public async run(): Promise<any> {\n    logger.log(\"Loaded with options\", this.options);\n\n    if (this.options.responsive === true) {\n      this.attachRedrawHandler();\n    }\n\n    await this.loadGoogle();\n\n    logger.log(\"Google is ready!\", window.google);\n\n    await this.renderAll();\n\n    // try {\n\n    // } catch (error) {\n    //   this.emit(\"error\", error);\n    // }\n\n    // this.emit(\"ready\");\n\n    if (typeof this.readyCallback === \"function\") {\n      logger.log(\"ready!\");\n      this.readyCallback();\n    }\n  }\n\n  public renderAll(): Promise<any>[] {\n    const promises: Promise<any>[] = [];\n\n    this.volcano.forEach(renderable => {\n      logger.log(`Rendering ${renderable.uuid}`);\n\n      promises.push(renderable.run());\n    });\n\n    return promises;\n  }\n\n  /**\n   * Create a new {@link DataQuery} for a {@link Renderable}\n   *\n   * If a String is passed, then a new {@link DataQuery} is created with no options.\n   * If an Object is passed, then the query must be defined by the object.\n   */\n  public query(url: string | DataQuery): DataQuery {\n    if (typeof url === \"string\") {\n      return new DataQuery(url);\n    } else {\n      return DataQuery.create(url);\n    }\n  }\n\n  /**\n   * Static method for creating new Charts.\n   *\n   * The payload payload can come from Lavacharts or manually if used\n   * as an independent library.\n   */\n  public chart(payload: RenderableTmpl): Chart {\n    logger.log(`Creating a new Chart`);\n\n    return new Chart(payload);\n  }\n\n  /**\n   * Static method for creating new Charts and Dashboards from a payload definition.\n   *\n   * The payload payload can come from Lavacharts or manually if used\n   * as an independent library.\n   */\n  public create(payload: RenderableTmpl): Renderable {\n    logger.log(`Creating a new ${payload.type}:`, payload);\n\n    if (payload.type === \"Dashboard\") {\n      return new Dashboard(payload);\n    }\n\n    return new Chart(payload);\n  }\n\n  /**\n   * Stores or creates then stores a {@link Renderable} within the module.\n   *\n   * @todo If the library has ran, and is ready, loading new charts will force a redrawAll of all the currently drawn charts.\n   */\n  public store(renderable: Renderable): void {\n    // if (renderable instanceof Renderable === false) {\n    //   renderable = this.create(renderable);\n    // }\n    // const newRenderable = this.create(renderable);\n\n    logger.log(`Storing ${renderable.uuid}`);\n\n    this.loader.addPackage(renderable.package);\n\n    this.volcano.set(renderable.label, renderable);\n\n    //if (this.isReady) {\n    //    this.redrawAll();\n    //}\n  }\n\n  /**\n   * Stores many charts at once.\n   */\n  public storeMany(renderables: Renderable[]): void {\n    renderables.forEach(this.store, this);\n  }\n\n  /**\n   * Retrieve a {@link Chart} / {@link Dashboard} from storage.\n   *\n   * The {@link Chart} object has the user defined properties such as data, options, formats, etc.\n   *\n   * The Google Chart object is available as \".googleChart\" from the returned LavaChart.\n   * It can be used to access any of the available methods such as\n   * getImageURI() or getChartLayoutInterface().\n   *\n   * See https://google-developers.appspot.com/chart/interactive/docs/gallery/linechart#methods\n   * for some examples relative to LineCharts.\n   *\n   * @throws {RenderableNotFound}\n   */\n  public get(label: string): Renderable | undefined {\n    if (this.volcano.has(label) === false) {\n      throw new RenderableNotFound(label);\n    }\n\n    return this.volcano.get(label);\n  }\n\n  /**\n   * Assigns a callback for when the charts are ready to be interacted with.\n   *\n   * This is used to wrap calls to lava.loadData() or lava.loadOptions()\n   * to protect against accessing charts that aren't loaded yet\n   *\n   * @throws {InvalidCallback}\n   */\n  public ready(callback: Function): void {\n    if (typeof callback !== \"function\") {\n      throw new InvalidCallback(callback);\n    }\n\n    this.readyCallback = callback.bind(this);\n  }\n\n  /**\n   * Loads new data into the chart and redraws.\n   *\n   *\n   * Used with an AJAX call to a PHP method returning DataTable->toPayload(),\n   * a chart can be dynamically update in page, without reloads.\n   */\n  public async loadData(\n    label: string,\n    payload: object\n  ): Promise<ChartUpdateReturn | void> {\n    const chart = this.get(label);\n\n    if (chart) {\n      return chart.updateData(payload);\n    }\n  }\n\n  /**\n   * Loads new options into a chart and redraws.\n   *\n   *\n   * Used with an AJAX call, or javascript events, to load a new array of options into a chart.\n   * This can be used to update a chart dynamically, without reloads.\n   */\n  public async loadOptions(\n    label: string,\n    payload: object\n  ): Promise<ChartUpdateReturn | void> {\n    const chart = this.get(label);\n\n    if (chart) {\n      return chart.updateOptions(payload);\n    }\n  }\n\n  /**\n   * Redraws all of the registered charts on screen.\n   *\n   * This method is attached to the window resize event with debouncing\n   * to make the charts responsive to the browser resizing.\n   */\n  public redrawAll(): boolean {\n    if (this.volcano.size === 0) {\n      logger.log(`Nothing to redraw.`);\n\n      return false;\n    }\n\n    logger.log(`Redrawing ${this.volcano.size} renderables.`);\n\n    this.volcano.forEach(renderable => {\n      logger.log(`Redrawing ${renderable.uuid}`);\n\n      renderable.draw();\n    });\n\n    return true;\n  }\n\n  /**\n   * Attach a listener to the window resize event for redrawing the charts.\n   */\n  private attachRedrawHandler(): void {\n    let debounced: number;\n\n    addEvent(window, \"resize\", () => {\n      // let redrawAll = this.redrawAll().bind(this);\n\n      clearTimeout(debounced);\n\n      debounced = setTimeout(() => {\n        logger.log(\"Window re-sized, redrawing...\");\n\n        this.redrawAll();\n      }, this.options.debounceTimeout);\n    });\n  }\n}\n","import LavaJs from \"../LavaJs\";\r\nimport { domLoaded } from \".\";\r\n\r\n/**\r\n * Create a new instance and attach to window.\r\n */\r\nwindow.lava = new LavaJs();\r\n\r\n/**\r\n * If LavaJs was loaded from Lavacharts, then window.lavacharts will\r\n * be defined with a JSON object of the options set within Lavacharts.\r\n */\r\nif (typeof window.lavacharts !== \"undefined\") {\r\n  window.lava.configure(window.lavacharts.options);\r\n}\r\n\r\n/**\r\n * If the module is getting ran from Lavacharts, then autoRun\r\n * will be true and once the DOM is ready, rendering will begin.\r\n *\r\n * If the module is ran as a JS library, then auto_run defaults\r\n * to false so the user can setup the charts and call .run()\r\n */\r\nif (window.lava.autorun) {\r\n  domLoaded().then(() => window.lava.run());\r\n}\r\n"],"sourceRoot":""}