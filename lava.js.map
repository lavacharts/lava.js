{"version":3,"sources":["webpack:///./src/Chart.ts","webpack:///./src/Dashboard.ts","webpack:///./src/DataQuery.ts","webpack:///./src/DefaultOptions.ts","webpack:///./src/Drawable.ts","webpack:///./src/Errors.ts","webpack:///./src/Eventful.ts","webpack:///./src/GoogleLoader.ts","webpack:///./src/LavaJs.ts","webpack:///./src/VisualizationProps.ts","webpack:///./src/lava.ts","webpack:///./src/lib/index.ts"],"names":["makeChartFactory","container","type","window","google","visualization","Chart","payload","png","Boolean","chartFactory","googleChart","events","attachEvents","draw","data","options","drawPng","img","document","createElement","src","getImageURI","innerHTML","appendChild","Object","keys","forEach","event","callback","context","func","debug","addListener","bind","call","prototype","toString","Drawable","Dashboard","json","bindings","DataQuery","url","opts","transformer","sendMethod","query","Query","Promise","resolve","reject","send","response","isError","DataError","autodraw","language","mapsApiKey","responsive","datetimeFormat","debounceTimeout","autoloadGoogle","chartPackages","timezone","drawable","label","dataSrc","elementId","formats","getProp","VIZ_PROPS","CLASS","PACKAGE","extend","uuid","lava","getWindowInstance","on","EVENTS","GOOGLE_READY","handleGoogleReady","DRAW","ElementIdNotFound","setData","applyFormats","getDataTable","createDataTable","DataTable","format","formatter","index","getChartUpdateReturn","assign","CHART_EVENTS","fireEvent","chart","emit","getElementById","TinyEmitter","LavaJsError","message","Error","InvalidCallback","DrawableNotFound","msg","elemId","Eventful","Debug","LOADER_STATES","GoogleLoader","Set","pkgs","packages","add","googleIsDefined","scriptTagInPage","injectGoogleStaticLoader","head","API_VERSION","config","charts","load","setOnLoadCallback","emitEvent","target","script","async","LOADER_URL","onload","onreadystatechange","test","readyState","scripts","getElementsByTagName","Array","from","LavaJs","DefaultOptions","Map","VERSION","configure","loader","loadGoogle","option","registry","waitForDom","attachRedrawHandler","create","register","volcano","has","get","updateData","updateOptions","size","addPackage","drawn","needsRedraw","set","addEventListener","debounced","addEvent","clearTimeout","setTimeout","redrawAll","AnnotationChart","AreaChart","BarChart","BubbleChart","CalendarChart","CandlestickChart","ColumnChart","ComboChart","DonutChart","GanttChart","GaugeChart","GeoChart","HistogramChart","LineChart","PieChart","SankeyChart","ScatterChart","SteppedAreaChart","TableChart","TimelineChart","TreeMapChart","WordTreeChart","localStorage","process","prop","VisualizationProps","useCapture","attachEvent","isArray","arrayToDataTable","getTableProperties","join","joinMethod","dt1Columns","dt2Columns"],"mappings":"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","file":"lava.js","sourcesContent":["import Drawable from \"./Drawable\";\nimport { ChartFactory } from \"./types/chart\";\nimport { DrawableTmpl } from \"./types/drawable\";\n\nfunction makeChartFactory(container: HTMLElement): ChartFactory {\n  return type => new window.google.visualization[type](container);\n}\n\nexport default class Chart extends Drawable {\n  /**\n   * If this is set to true, then the {@link Chart}\n   * will be drawn and converted to a PNG\n   */\n  public png = false;\n\n  /**\n   * Create a new {@link Chart}\n   */\n  constructor(payload: DrawableTmpl) {\n    super(payload);\n\n    this.png = Boolean(payload.png);\n  }\n\n  /**\n   * Actions to perform before `chart.draw()`\n   */\n  public async draw(): Promise<void> {\n    await super.draw();\n\n    const chartFactory = makeChartFactory(this.container as HTMLElement);\n\n    this.googleChart = chartFactory(this.class);\n\n    if (this.events) {\n      this.attachEvents();\n    }\n\n    this.googleChart.draw(this.data, this.options);\n\n    if (this.png) {\n      this.drawPng();\n    }\n  }\n\n  /**\n   * Draws the chart as a PNG instead of the standard SVG\n   *\n   * @see https://developers.google.com/chart/interactive/docs/printing\n   */\n  private drawPng(): void {\n    const img = document.createElement(\"img\");\n\n    img.src = this.googleChart.getImageURI();\n\n    if (this.container) {\n      this.container.innerHTML = \"\";\n      this.container.appendChild(img);\n    }\n  }\n\n  /**\n   * Attach the defined chart event handlers.\n   */\n  private attachEvents(): void {\n    Object.keys(this.events).forEach(event => {\n      const callback = this.events[event];\n\n      let context = window;\n      let func = callback;\n\n      if (typeof callback === \"object\") {\n        // eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n        //@ts-ignore I don't know what to do here\n        context = context[callback[0]];\n        func = callback[1];\n      }\n\n      this.debug(`The <${event}> event will be handled by:`);\n      this.debug(func);\n      this.debug(\"within the context of:\");\n      this.debug(context);\n\n      /**\n       * Set the context of \"this\" within the user provided callback to the\n       * chart that fired the event while providing the datatable of the chart\n       * to the callback as an argument.\n       */\n      google.visualization.events.addListener(this.googleChart, event, () => {\n        this.debug(`Caught <${event}>`);\n\n        const callback = Object.bind(\n          context[Object.call.prototype.toString(func)],\n          this.googleChart\n        ) as (data: google.visualization.DataTable) => any;\n\n        callback(this.data);\n      });\n    });\n  }\n}\n","import Drawable from \"./Drawable\";\n/**\n * Dashboard Class\n *\n * @class\n * @module    module:LavaJs/Dashboard\n * @author    Kevin Hill <kevinkhill@gmail.com>\n * @copyright (c) 2019, Kevin Hill\n * @license   MIT\n */\nexport default class Dashboard extends Drawable {\n  bindings: any;\n\n  /**\n   * Create a new Dashboard\n   *\n   * @param {Object} json JSON object representing a Dashboard.\n   */\n  constructor(json: any) {\n    json.type = \"Dashboard\";\n\n    super(json);\n\n    this.googleChart = new window.google.visualization.Dashboard(this\n      .container as HTMLElement);\n\n    this.bindings = json.bindings;\n\n    // this._attachBindings();\n  }\n\n  /**\n   * Process and attach the bindings to the dashboard.\n   *\n   * @TODO: Needs to be modified and tested for the other types of bindings.\n   */\n  // private _attachBindings(): void {\n  //   for (const binding of this.bindings) {\n  //     const controlWraps = [];\n  //     const chartWraps = [];\n\n  //     for (const controlWrap of binding.controlWrappers) {\n  //       controlWraps.push(new google.visualization.ControlWrapper(controlWrap));\n  //     }\n\n  //     for (const chartWrap of binding.chartWrappers) {\n  //       chartWraps.push(new google.visualization.ChartWrapper(chartWrap));\n  //     }\n\n  //     this.googleChart.bind(controlWraps, chartWraps);\n  //   }\n  // }\n}\n","import { DataError } from \"./Errors\";\nimport {\n  GoogleQueryOptions,\n  GoogleQueryResponse,\n  QueryTransformer\n} from \"./types/google\";\n\n/**\n * Used for loading remote data as a {@link DataTable}\n *\n * @see https://developers.google.com/chart/interactive/docs/reference#Query\n */\nexport default class DataQuery {\n  public transformer: QueryTransformer;\n\n  /**\n   * Create a new DataQuery for a DataTable\n   *\n   * @throws {DataError}\n   */\n  constructor(\n    public url: string,\n    public opts?: GoogleQueryOptions,\n    transformer?: QueryTransformer\n  ) {\n    this.opts = { sendMethod: \"auto\" };\n    this.transformer = query => query;\n\n    if (typeof transformer === \"function\") {\n      this.transformer = transformer;\n    }\n\n    if (opts) {\n      this.opts = opts;\n    }\n  }\n\n  /**\n   * create a new DataQuery based on the given payload\n   *\n   * @throws {DataError}\n   */\n  public static create(payload: DataQuery): DataQuery {\n    if (!payload.url) {\n      throw new DataError(\n        '\"url\" is a mandatory parameter for creating a DataQuery.'\n      );\n    }\n\n    const query = new DataQuery(payload.url);\n\n    if (typeof payload.opts === \"object\") {\n      query.opts = payload.opts as GoogleQueryOptions;\n    }\n\n    if (typeof payload.transformer === \"function\") {\n      query.transformer = payload.transformer as QueryTransformer;\n    }\n\n    return query;\n  }\n\n  /**\n   * Send the DataQuery\n   */\n  public send(): Promise<GoogleQueryResponse> {\n    const query = new window.google.visualization.Query(this.url, this.opts);\n\n    return new Promise((resolve, reject) => {\n      this.transformer(query).send(response => {\n        if (response.isError()) {\n          reject(response);\n        }\n\n        resolve(response);\n      });\n    });\n  }\n}\n","import { LavaJsOptions } from \"./types\";\n\nexport default {\n  autodraw: true,\n  language: \"en\",\n  mapsApiKey: \"\",\n  responsive: true,\n  datetimeFormat: \"\",\n  debounceTimeout: 250,\n  autoloadGoogle: true,\n  chartPackages: [\"corechart\"],\n  timezone: \"America/Los_Angeles\"\n} as LavaJsOptions;\n","import Debug from \"debug\";\nimport { TinyEmitter } from \"tiny-emitter\";\n\nimport DataQuery from \"./DataQuery\";\nimport { DataError, ElementIdNotFound } from \"./Errors\";\nimport { EVENTS } from \"./Eventful\";\nimport { createDataTable, debug, getProp, getWindowInstance } from \"./lib\";\nimport {\n  ChartClasses,\n  ChartUpdateReturn,\n  Google,\n  LavaJsOptions,\n  SupportedCharts\n} from \"./types\";\nimport { DrawableTmpl } from \"./types/drawable\";\nimport { Formatter } from \"./types/formats\";\nimport { VIZ_PROPS } from \"./VisualizationProps\";\n\ntype DrawableTypes = SupportedCharts | \"Dashboard\";\n\n/**\n * The {@link Drawable} class is the base for {@link Chart}s and {@link Dashboard}s\n * to share common methods between the two types.\n */\nexport default class Drawable extends TinyEmitter {\n  public static CHART_EVENTS = [\n    \"ready\",\n    \"select\",\n    \"error\",\n    \"onmouseover\",\n    \"onmouseout\"\n  ];\n\n  /**\n   * PreDraw hook\n   */\n  public preDraw?(): void;\n\n  /**\n   * PostDraw hook\n   */\n  public postDraw?(): void;\n\n  /**\n   * Configurable options.\n   */\n  public options: LavaJsOptions;\n\n  /**\n   * DataTable for the {@link Chart} / {@link Dashboard}.\n   */\n  public data!: google.visualization.DataTable;\n\n  /**\n   * Google chart object created once the {@link Chart} / {@link Dashboard}\n   * has been rendered.\n   */\n  public googleChart: any;\n\n  /**\n   * Type of {@link Drawable}.\n   */\n  public readonly type: DrawableTypes;\n\n  /**\n   * The google.visualization class needed for rendering.\n   */\n  public readonly class: ChartClasses;\n\n  /**\n   * The google.visualization package needed for rendering.\n   */\n  public readonly package: string;\n\n  /**\n   * Element ID of the DOM node for the container.\n   */\n  public readonly elementId: string;\n\n  /**\n   * Unique label for the {@link Chart} / {@link Dashboard}.\n   */\n  public readonly label: string;\n\n  /**\n   * Formatters for the DataTable\n   */\n  protected formats: Formatter[];\n\n  /**\n   * Event listeners for the Drawable.\n   */\n  protected events: Record<string, Function>;\n\n  /**\n   * The source of the DataTable, to be used in setData().\n   */\n  private dataSrc: any;\n\n  protected readonly debug: Debug.Debugger;\n\n  /**\n   * Create a new Drawable\n   *\n   * @param {Object} json\n   */\n  constructor(drawable: DrawableTmpl) {\n    super();\n\n    this.type = drawable.type;\n    this.label = drawable.label;\n    this.dataSrc = drawable.data;\n    this.elementId = drawable.elementId;\n\n    this.options = drawable.options || {};\n    this.formats = drawable.formats || [];\n    this.events = drawable.events || {};\n\n    this.class = getProp(this.type as SupportedCharts, VIZ_PROPS.CLASS);\n    this.package = getProp(this.type as SupportedCharts, VIZ_PROPS.PACKAGE);\n\n    this.debug = debug.extend(this.uuid);\n\n    const lava = getWindowInstance();\n\n    lava.on(EVENTS.GOOGLE_READY, () => this.handleGoogleReady);\n\n    lava.on(EVENTS.DRAW, () => this.draw());\n\n    this.debug(\"Created!\");\n    this.debug(drawable);\n  }\n\n  /**\n   * Unique identifier for the {@link Chart} / {@link Dashboard}.\n   */\n  public get uuid(): string {\n    return this.type + \":\" + this.label;\n  }\n\n  /**\n   * HTMLElement into which the chart will be rendered.\n   */\n  public get container(): HTMLElement | null {\n    return document.getElementById(this.elementId);\n  }\n\n  /**\n   * Draws the {@link Chart} / {@link Dashboard} with the predefined data and options.\n   *\n   * @public\n   */\n  public async draw(): Promise<void> {\n    if (!this.container) {\n      throw new ElementIdNotFound(this.elementId);\n    }\n\n    await this.setData(this.dataSrc);\n\n    if (!this.data) {\n      throw new DataError(`Could not draw, data is ${this.data}`);\n    }\n\n    if (this.formats) {\n      this.applyFormats();\n    }\n  }\n\n  /**\n   * Sets the {@link DataTable} for the {@link Drawable}.\n   *\n   * @param {Object|Function|Array|DataQuery|DataTable} payload Source of data\n   */\n  public async setData(payload: any): Promise<void> {\n    if (payload instanceof DataQuery) {\n      this.debug(`Sending DataQuery`);\n\n      const response = await payload.send();\n\n      this.debug(`Response received`);\n      this.debug(response);\n\n      this.data = response.getDataTable();\n    } else {\n      this.data = createDataTable(payload);\n    }\n\n    if (this.data instanceof google.visualization.DataTable === false) {\n      throw new DataError(\n        `There was a error setting the data for ${this.uuid}`\n      );\n    }\n\n    this.debug(`Setting data`);\n    this.debug(this.data);\n\n    if (payload.formats) {\n      this.applyFormats(payload.formats);\n    }\n  }\n\n  /**\n   * Apply the formats to the DataTable\n   */\n  public applyFormats(formats?: Formatter[]): void {\n    if (formats) {\n      this.formats = formats;\n    }\n\n    for (const format of this.formats) {\n      const formatter = new window.google.visualization[format.type](\n        format.options\n      );\n\n      this.debug(`Formatting column [${format.index}] with:`);\n      this.debug(format);\n\n      formatter.format(this.data, format.index);\n    }\n  }\n\n  /**\n   * Loads new data into the drawable and redraws.\n   *\n   * Used with an AJAX call to a PHP method returning DataTable->toPayload(),\n   * a chart can be dynamically update in page, without reloads.\n   */\n  public async updateData(payload: object): Promise<ChartUpdateReturn> {\n    await this.setData(payload);\n\n    await this.draw();\n\n    return this.getChartUpdateReturn();\n  }\n\n  /**\n   * Loads new options into the drawable and redraws.\n   *\n   * Used with an AJAX call, or javascript events, to load a new array of options into a chart.\n   * This can be used to update a chart dynamically, without reloads.\n   */\n  public async updateOptions(payload: object): Promise<ChartUpdateReturn> {\n    this.options = Object.assign(this.options, payload);\n\n    await this.draw();\n\n    return this.getChartUpdateReturn();\n  }\n\n  /**\n   * This method will have full access to the `google` object\n   */\n  private handleGoogleReady(google: Google): void {\n    this.debug(`Caught <${EVENTS.GOOGLE_READY}>`);\n\n    // console.log(google);\n\n    /**\n     * Attach event emitters onto the google chart to relay the events\n     * forward onto the lavachart.\n     *\n     * The Google Chart and DataTable objects will be passed to the listener\n     * callback for interaction.\n     */\n    Drawable.CHART_EVENTS.forEach(event => {\n      google.visualization.events.addListener(this.googleChart, event, () => {\n        this.fireEvent(event);\n      });\n    });\n  }\n\n  private fireEvent(event: string): void {\n    this.debug(`Firing <${event}>`);\n\n    const payload = {\n      chart: this.googleChart,\n      data: this.data\n    };\n\n    this.emit(event, payload);\n  }\n\n  private getChartUpdateReturn(): ChartUpdateReturn {\n    return {\n      data: this.data,\n      chart: this.googleChart,\n      options: this.options\n    };\n  }\n}\n","/**\n * LavaJsError Error\n *\n * Base error that the specific errors extend.\n */\nexport class LavaJsError extends Error {\n  constructor(message = \"There was an error\") {\n    super(message);\n  }\n}\n\n/**\n * InvalidCallback Error\n *\n * Thrown when anything but a function is given as a callback.\n */\nexport class InvalidCallback extends LavaJsError {\n  constructor(callback: any) {\n    super(`[lava.js] \"${typeof callback}\" is not a valid callback.`);\n  }\n}\n\n/**\n * InvalidLabel Error\n *\n * Thrown when a {@link Drawable} is not found in the module.\n */\nexport class DrawableNotFound extends LavaJsError {\n  constructor(label: string) {\n    super(`[lava.js] A drawable with the label \"${label}\" was not found.`);\n  }\n}\n\n/**\n * ElementIdNotFound Error\n *\n * Thrown when the given ID for an HTMLElement is not found in the DOM.\n */\nexport class DataError extends LavaJsError {\n  constructor(msg: string) {\n    super(msg);\n  }\n}\n\n/**\n * ElementIdNotFound Error\n *\n * Thrown when the given ID for an HTMLElement is not found in the DOM.\n */\nexport class ElementIdNotFound extends LavaJsError {\n  constructor(elemId: string) {\n    super(`[lava.js] DOM node where id=\"${elemId}\" was not found.`);\n  }\n}\n","import Debug from \"debug\";\nimport { TinyEmitter } from \"tiny-emitter\";\n\nexport enum EVENTS {\n  GOOGLE_READY = \"google-ready\",\n  INITIALIZING = \"init\",\n  PRE_DRAW = \"predraw\",\n  DRAW = \"draw\",\n  POST_DRAW = \"postdraw\",\n  RESIZE = \"window-resize\",\n  READY = \"ready\"\n}\n\nexport default class Eventful extends TinyEmitter {\n  protected debug!: Debug.Debugger;\n\n  protected emitEvent(event: EVENTS, payload?: any): void {\n    if (this.debug instanceof Debug.debug) {\n      this.debug(`Firing Event <${event}>`);\n    }\n\n    if (typeof payload !== \"undefined\") {\n      super.emit(event, payload);\n    } else {\n      super.emit(event);\n    }\n  }\n}\n","// import { Debugger } from \"debug\";\n// import { TinyEmitter } from \"tiny-emitter\";\n\nimport Eventful, { EVENTS } from \"./Eventful\";\nimport { debug } from \"./lib\";\nimport { Google, GoogleLoaderOptions, LavaJsOptions } from \"./types\";\n\nexport enum LOADER_STATES {\n  \"NULL\" = \"NULL\",\n  \"RESOLVING\" = \"RESOLVING\",\n  \"RESOLVED\" = \"RESOLVED\"\n}\n\nexport default class GoogleLoader extends Eventful {\n  /**\n   * Version of the Google charts API to load\n   */\n  public static API_VERSION = \"current\";\n\n  /**\n   * Url to Google's static loader\n   */\n  public static LOADER_URL = \"https://www.gstatic.com/charts/loader.js\";\n\n  /**\n   * Packages to load\n   */\n  private readonly packages: Set<string> = new Set();\n\n  /**\n   * Create a new instance of the GoogleLoader\n   *\n   * @param options LavaJsOptions\n   */\n  constructor(private options: LavaJsOptions) {\n    super();\n\n    this.debug = debug.extend(\"GoogleLoader\");\n  }\n\n  /**\n   * Flag that will be true once window.google is available in page.\n   */\n  public get googleIsDefined(): boolean {\n    return typeof window.google !== \"undefined\";\n  }\n\n  /**\n   * Flag that will be true once Google's Static Loader is in page.\n   */\n  public get scriptTagInPage(): boolean {\n    const scripts = document.getElementsByTagName(\"script\");\n\n    for (const script of Array.from(scripts)) {\n      if (script.src === GoogleLoader.LOADER_URL) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Get the options for the google loader.\n   */\n  public get config(): GoogleLoaderOptions {\n    const config: GoogleLoaderOptions = {\n      language: this.options.language || \"en\",\n      packages: Array.from(this.packages)\n    };\n\n    if (this.options.mapsApiKey !== \"\") {\n      config.mapsApiKey = this.options.mapsApiKey;\n    }\n\n    return config;\n  }\n\n  /**\n   * Get a reference to the `window.google`\n   */\n  public get google(): Google {\n    return window.google;\n  }\n\n  /**\n   * Add one package to the list that Google needs to load.\n   */\n  public addPackage(pkgs: string): void {\n    this.packages.add(pkgs);\n  }\n\n  /**\n   * Load the Google Static Loader and resolve the promise when ready.\n   */\n  public async loadGoogle(): Promise<Google> {\n    this.debug(\"Loading Google...\");\n\n    if (this.googleIsDefined) {\n      this.debug(this.google);\n\n      return this.google;\n    }\n\n    if (this.scriptTagInPage === false) {\n      this.debug(\"Static loader not found, injecting\");\n\n      await this.injectGoogleStaticLoader(document.head);\n    }\n\n    this.debug(`Loading API, version '${GoogleLoader.API_VERSION}'`);\n    this.debug(\"with config\");\n    this.debug(this.config);\n\n    window.google.charts.load(GoogleLoader.API_VERSION, this.config);\n\n    return new Promise(resolve => {\n      window.google.charts.setOnLoadCallback(() => {\n        this.debug(\"Loaded!\");\n        this.emitEvent(EVENTS.GOOGLE_READY, this.google);\n\n        resolve(this.google);\n      });\n    });\n  }\n\n  /**\n   * Create a new script tag for the Google Static Loader\n   */\n  private injectGoogleStaticLoader(target: Node): Promise<void> {\n    const debug = this.debug.extend(\"StaticLoader\");\n\n    return new Promise(resolve => {\n      const script = document.createElement(\"script\") as ScriptElement;\n\n      script.type = \"text/javascript\";\n      script.async = true;\n      script.src = GoogleLoader.LOADER_URL;\n      script.onload = script.onreadystatechange = (event: Event) => {\n        // eslint-disable-next-line no-param-reassign\n        event = event || window.event;\n\n        if (\n          event.type === \"load\" ||\n          /loaded|complete/.test(script.readyState)\n        ) {\n          script.onload = script.onreadystatechange = null;\n          debug(\"Ready!\");\n          resolve();\n        }\n      };\n\n      // debug(`Injecting ${script} into ${target}`);\n      debug(`Injecting ${script} into ${target}`);\n\n      target.appendChild(script);\n    });\n  }\n}\n","// import Debug from \"debug\";\n\nimport Chart from \"./Chart\";\nimport Dashboard from \"./Dashboard\";\nimport DataQuery from \"./DataQuery\";\nimport DefaultOptions from \"./DefaultOptions\";\nimport Drawable from \"./Drawable\";\nimport { DrawableNotFound, InvalidCallback } from \"./Errors\";\nimport Eventful, { EVENTS } from \"./Eventful\";\nimport GoogleLoader from \"./GoogleLoader\";\nimport { addEvent, debug } from \"./lib\";\n// import { actions, store } from \"./lib/store\";\nimport { ChartUpdateReturn, Google, LavaJsOptions } from \"./types\";\nimport { DrawableState, DrawableTmpl } from \"./types/drawable\";\n\ntype LavaState = Record<string, DrawableState>;\n\n/**\n * Google Chart API wrapper library\n *\n * This module can be used as a standalone, browser based library, or in\n * conjunction with the PHP library, <a href=\"https://github.com/kevinkhill/lavacharts\">Lavacharts</a>.\n */\nexport default class LavaJs extends Eventful {\n  public static readonly VERSION = \"4.0.0-beta4\";\n\n  /**\n   * Configurable options for the library\n   */\n  private options: LavaJsOptions = DefaultOptions;\n\n  /**\n   * Drawables registy\n   */\n  private registry: LavaState = {};\n\n  /**\n   * Chart storage\n   */\n  private readonly volcano: Map<string, Drawable> = new Map();\n\n  /**\n   * Ready Callback\n   */\n  // private readyCallback = (): void => {};\n\n  /**\n   * Loader class for appending the google script and making window.google available\n   */\n  private readonly loader: GoogleLoader;\n\n  /**\n   * Create a new instance of the LavaJs library\n   *\n   * When creating an instance of LavaJs, the default behavior is\n   * to check if `window.google !== undefined` and if so, then we\n   * start the {@link GoogleLoader}.\n   *\n   * The {@link GoogleLoader} will check the <head> for the\n   * gstatic loader and if not found, inject it into the <head>.\n   */\n  constructor(options?: LavaJsOptions) {\n    super();\n\n    this.debug = debug;\n    this.debug(`LavaJs v${LavaJs.VERSION}`);\n\n    if (options) {\n      this.configure(options);\n    }\n\n    this.debug(\"Loaded with options:\");\n    this.debug(this.options);\n\n    this.loader = new GoogleLoader(this.options);\n\n    // Relay the event forward from the loader\n    this.loader.on(EVENTS.GOOGLE_READY, (google: Google) => {\n      this.emitEvent(EVENTS.GOOGLE_READY, google);\n\n      if (this.options.autodraw) {\n        this.emitEvent(EVENTS.DRAW);\n      }\n    });\n\n    if (this.loader.googleIsDefined === false) {\n      if (this.options.autoloadGoogle) {\n        this.loader.loadGoogle();\n      }\n    }\n  }\n\n  /**\n   * Get a reference to the `window.google`\n   */\n  public get google(): Google {\n    return window.google;\n  }\n\n  /**\n   * Forward the autoloadGoogle option to the main object to check in page.\n   */\n  public get autoloadGoogle(): boolean {\n    return typeof this.options.autoloadGoogle === \"boolean\"\n      ? this.options.autoloadGoogle\n      : true;\n  }\n\n  /**\n   * Forward the autodraw option to the main object to check in page.\n   */\n  public get autodraw(): boolean {\n    return typeof this.options.autodraw === \"boolean\"\n      ? this.options.autodraw\n      : true;\n  }\n\n  public getOption(\n    option: keyof LavaJsOptions\n  ): string | number | boolean | string[] | undefined {\n    return this.options[option];\n  }\n\n  /**\n   * Get a list of all the registered charts\n   */\n  public getRegistry(): LavaState {\n    return this.registry;\n  }\n\n  /**\n   * Configure the LavaJs module.\n   */\n  public configure(options: LavaJsOptions): void {\n    this.options = Object.assign(this.options, options);\n  }\n\n  /**\n   * Initializes the library by loading the Google Chart API.\n   */\n  // public async loadGoogle(): Promise<void> {\n  //   return this.loader.loadGoogle();\n  // }\n\n  /**\n   * Get a reference to the window.google object or load it if needed.\n   */\n  // public async getGoogle(): Promise<Google> {\n  //   if (this.loader.googleIsDefined === false) {\n  //     await this.loadGoogle();\n  //   }\n\n  //   return window.google;\n  // }\n\n  /**\n   * Runs the LavaJs.js module\n   *\n   * @emits {ready}\n   */\n  public async draw(): Promise<any> {\n    await this.waitForDom();\n\n    if (this.options.responsive === true) {\n      this.attachRedrawHandler();\n    }\n\n    this.loader.on(\"ready\", () => {\n      this.emitEvent(EVENTS.DRAW);\n    });\n\n    // this.emitEvent(EVENTS.READY);\n\n    // this.readyCallback();\n  }\n\n  /**\n   * Create a new {@link DataQuery} for a {@link Drawable}\n   *\n   * If a String is passed, then a new {@link DataQuery} is created with no options.\n   * If an Object is passed, then the query must be defined by the object.\n   */\n  public query(url: string | DataQuery): DataQuery {\n    if (typeof url === \"string\") {\n      return new DataQuery(url);\n    } else {\n      return DataQuery.create(url);\n    }\n  }\n\n  /**\n   * Create a new {@link Chart} from an Object\n   */\n  public chart(payload: DrawableTmpl): Chart {\n    const chart = new Chart(payload);\n\n    return this.register(chart);\n  }\n\n  /**\n   * Create a new {@link Dashboard} from an Object\n   */\n  public dashboard(payload: DrawableTmpl): Dashboard {\n    return new Dashboard(payload);\n  }\n\n  /**\n   * Retrieve a {@link Chart} / {@link Dashboard} from storage.\n   *\n   * The {@link Chart} object has the user defined properties such as data, options, formats, etc.\n   *\n   * The Google Chart object is available as \".googleChart\" from the returned LavaChart.\n   * It can be used to access any of the available methods such as\n   * getImageURI() or getChartLayoutInterface().\n   *\n   * See https://google-developers.appspot.com/chart/interactive/docs/gallery/linechart#methods\n   * for some examples relative to LineCharts.\n   *\n   * @throws {DrawableNotFound}\n   */\n  public get(label: string): Drawable | undefined {\n    if (this.volcano.has(label) === false) {\n      throw new DrawableNotFound(label);\n    }\n\n    return this.volcano.get(label);\n  }\n\n  /**\n   * Assigns a callback for when the charts are ready to be interacted with.\n   *\n   * This is used to wrap calls to lava.loadData() or lava.loadOptions()\n   * to protect against accessing charts that aren't loaded yet\n   *\n   * @throws {InvalidCallback}\n   */\n  public ready(callback: Function): void {\n    if (typeof callback !== \"function\") {\n      throw new InvalidCallback(callback);\n    }\n\n    // this.readyCallback = callback.bind(this);\n  }\n\n  /**\n   * Loads new data into the chart and redraws.\n   *\n   *\n   * Used with an AJAX call to a PHP method returning DataTable->toPayload(),\n   * a chart can be dynamically update in page, without reloads.\n   */\n  public async loadData(\n    label: string,\n    payload: object\n  ): Promise<ChartUpdateReturn | void> {\n    const chart = this.get(label);\n\n    if (chart) {\n      return chart.updateData(payload);\n    }\n  }\n\n  /**\n   * Loads new options into a chart and redraws.\n   *\n   * Used with an AJAX call, or javascript events, to load a new array of options into a chart.\n   * This can be used to update a chart dynamically, without reloads.\n   */\n  public async loadOptions(\n    label: string,\n    payload: object\n  ): Promise<ChartUpdateReturn | void> {\n    const chart = this.get(label);\n\n    if (chart) {\n      return chart.updateOptions(payload);\n    }\n  }\n\n  /**\n   * Redraws all of the registered charts on screen.\n   *\n   * This method is attached to the window resize event with debouncing\n   * to make the charts responsive to the browser resizing.\n   */\n  public redrawAll(): boolean {\n    if (this.volcano.size === 0) {\n      this.debug(`Nothing to redraw.`);\n\n      return false;\n    }\n\n    this.debug(`Redrawing ${this.volcano.size} drawables.`);\n\n    this.volcano.forEach(drawable => {\n      this.debug(`Redrawing ${drawable.uuid}`);\n\n      drawable.draw();\n    });\n\n    return true;\n  }\n\n  /**\n   * Register a {@link Drawable} with the module.\n   *\n   * The registry keeps a record of all created charts, which enables\n   * the event firing through the common interface of `window.lava`\n   */\n  private register<T extends Drawable>(drawable: T): T {\n    this.debug(`Registering ${drawable.uuid}`);\n\n    this.loader.addPackage(drawable.package);\n\n    this.registry[drawable.uuid] = {\n      drawn: false,\n      needsRedraw: false\n    };\n\n    this.volcano.set(drawable.type, drawable);\n\n    return drawable;\n  }\n\n  /**\n   * Simple Promise for the DOM to be ready.\n   */\n  private async waitForDom(): Promise<void> {\n    this.debug(\"Waiting for the DOM to become ready\");\n\n    return new Promise(resolve => {\n      if (\n        document.readyState === \"interactive\" ||\n        document.readyState === \"complete\"\n      ) {\n        resolve();\n\n        this.debug(\"DOM ready\");\n      } else {\n        document.addEventListener(\"DOMContentLoaded\", () => resolve());\n      }\n    });\n  }\n\n  /**\n   * Attach a listener to the window resize event for redrawing the charts.\n   */\n  private attachRedrawHandler(): void {\n    let debounced: number;\n\n    addEvent(window, \"resize\", () => {\n      // let redrawAll = this.redrawAll().bind(this);\n\n      clearTimeout(debounced);\n\n      debounced = setTimeout(() => {\n        this.debug(\"Window re-sized, redrawing...\");\n\n        this.redrawAll();\n      }, this.options.debounceTimeout);\n    });\n  }\n}\n","// import { VizProps } from \"./types/chart\";\nimport { ChartClasses, SupportedCharts } from \"./types/chart\";\n\nexport enum VIZ_PROPS {\n  \"CLASS\",\n  \"PACKAGE\",\n  \"VERSION\"\n}\n\ntype VisualizationPropertyDict = {\n  [K in SupportedCharts]: [ChartClasses, string, number];\n};\n\nexport default {\n  AnnotationChart: [\"AnnotationChart\", \"annotationchart\", 1],\n  AreaChart: [\"AreaChart\", \"corechart\", 1],\n  BarChart: [\"BarChart\", \"corechart\", 1],\n  BubbleChart: [\"BubbleChart\", \"corechart\", 1],\n  CalendarChart: [\"Calendar\", \"calendar\", 1],\n  CandlestickChart: [\"CandlestickChart\", \"corechart\", 1],\n  ColumnChart: [\"ColumnChart\", \"corechart\", 1],\n  ComboChart: [\"ComboChart\", \"corechart\", 1],\n  DonutChart: [\"PieChart\", \"corechart\", 1],\n  GanttChart: [\"Gantt\", \"gantt\", 1],\n  GaugeChart: [\"Gauge\", \"gauge\", 1],\n  GeoChart: [\"GeoChart\", \"geochart\", 1],\n  HistogramChart: [\"Histogram\", \"corechart\", 1],\n  LineChart: [\"LineChart\", \"corechart\", 1],\n  PieChart: [\"PieChart\", \"corechart\", 1],\n  SankeyChart: [\"Sankey\", \"sankey\", 1],\n  ScatterChart: [\"ScatterChart\", \"corechart\", 1],\n  SteppedAreaChart: [\"SteppedAreaChart\", \"corechart\", 1],\n  TableChart: [\"Table\", \"table\", 1],\n  TimelineChart: [\"Timeline\", \"timeline\", 1],\n  TreeMapChart: [\"TreeMap\", \"treemap\", 1],\n  WordTreeChart: [\"WordTree\", \"wordtree\", 1]\n} as VisualizationPropertyDict;\n","import LavaJs from \"./LavaJs\";\n\nif (localStorage && process.env.NODE_ENV === \"development\") {\n  localStorage.debug = \"LavaJs*\";\n} else {\n  localStorage.debug = \"\";\n}\n\nwindow.LavaJs = LavaJs;\nwindow.lava = new LavaJs();\n","import Debug from \"debug\";\n\nimport LavaJs from \"../LavaJs\";\nimport { SupportedCharts } from \"../types\";\nimport VisualizationProps, { VIZ_PROPS } from \"../VisualizationProps\";\n\nexport const debug = Debug(\"LavaJs\");\n\nexport function getWindowInstance(): LavaJs {\n  return window.lava;\n}\n\nexport function getProp(chart: SupportedCharts, prop: VIZ_PROPS): any {\n  return VisualizationProps[chart][prop];\n}\n\n/**\n * Method for attaching events to objects.\n *\n * @author Alex V.\n * @link http://stackoverflow.com/a/3150139\n */\nexport function addEvent(\n  target: any,\n  type: string,\n  callback: Function,\n  useCapture = false\n): void {\n  if (target === null || typeof target === \"undefined\") {\n    return;\n  }\n\n  if (target.addEventListener) {\n    target.addEventListener(type, callback, useCapture);\n  } else if (target.attachEvent) {\n    target.attachEvent(\"on\" + type, callback);\n  } else {\n    target[\"on\" + type] = callback;\n  }\n}\n\n/**\n * Sets the data for the chart by creating a new DataTable\n *\n * @param {Object|Function|Array} payload Json representation of a DataTable\n */\nexport function createDataTable(payload: any): google.visualization.DataTable {\n  // If a function is received, then create an new DataTable and pass it to the\n  // function for user modifications.\n  if (typeof payload === \"function\") {\n    return payload(new window.google.visualization.DataTable());\n  }\n\n  // If an Array is received, then attempt to use parse with arrayToDataTable.\n  if (Array.isArray(payload)) {\n    return window.google.visualization.arrayToDataTable(payload);\n  }\n\n  // Since Google compiles their classes, we can't use instanceof to check since\n  // it is no longer called a \"DataTable\" (it's \"gvjs_P\" but that could change...)\n  // If this check passes, then it already is a DataTable\n  if (typeof payload.getTableProperties === \"function\") {\n    return payload;\n  }\n\n  // If the payload is from the php class JoinedDataTable->toJson(), then create\n  // two new DataTables and join them with the defined options.\n  if (Array.isArray(payload.data)) {\n    return window.google.visualization.data.join(\n      new window.google.visualization.DataTable(payload.data[0]),\n      new window.google.visualization.DataTable(payload.data[1]),\n      payload.keys,\n      payload.joinMethod,\n      payload.dt1Columns,\n      payload.dt2Columns\n    );\n  }\n\n  // If a php DataTable->toJson() payload is received, with formatted columns,\n  // then payload.data will be defined. Use this to create the DataTable.\n  if (typeof payload.data === \"object\") {\n    // eslint-disable-next-line no-param-reassign\n    payload = payload.data;\n  }\n\n  // If we reach here, then it must be standard JSON for creating a DataTable.\n  return new window.google.visualization.DataTable(payload);\n}\n"],"sourceRoot":""}